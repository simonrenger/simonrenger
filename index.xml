<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Simon Renger</title><link>/</link><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><description>Simon Renger</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© Simon Renger 2022</copyright><lastBuildDate>Tue, 28 Dec 2021 00:00:00 +0100</lastBuildDate><image><url>/img/icon-192.png</url><title>Simon Renger</title><link>/</link></image><item><title>Systematic review of repositories on GitHub with python (Game Dev Style)</title><link>/posts/systematic_review_on_github/</link><pubDate>Tue, 28 Dec 2021 00:00:00 +0100</pubDate><guid>/posts/systematic_review_on_github/</guid><description>&lt;p>While I was working on my Masters in &lt;a href="https://www.buas.nl/en/programmes/master-game-technology">Game Technology&lt;/a> at &lt;a href="https://www.buas.nl/en">Breda University of Applied Sciences&lt;/a> (BUas), I came across an interesting problem: &lt;em>How am I executing a systematic review of GitHub repositories?&lt;/em>&lt;/p>
&lt;p>None of the standard literature regarding methodology covers this case. &lt;em>Okay okay&amp;hellip;&lt;/em> GitHub is relatively new and special!&lt;/p>
&lt;p>The lack of answers in literature led me into the wild of the Internet. Sadly when googling &lt;em>&amp;lsquo;Systematic Review of GitHub Repositories&amp;rsquo;&lt;/em>, you do not find a &amp;ldquo;HowTo&amp;rdquo; or actually a good GitHub repository with some software.&lt;/p>
&lt;p>That I find little on regular Google is interesting because Google Scholar gives you a lot of entries when looking for Reviews on GitHub. Sadly, many of these reviews are, as per usual, behind a paywall. Moreover, those papers usually just claim, &amp;ldquo;We did this &amp;hellip; description,&amp;rdquo; but there is seldom any code to be found, or if there is code, it is written in some obscure language an average Game Developer does not use&amp;hellip;&lt;/p>
&lt;p>Well, I just adjusted my search a bit. Finally, I came across this fantastic article from the &lt;em>Department of Information and Computing Sciences, Utrecht University&lt;/em>: &lt;a href="https://www.mdpi.com/2076-3417/9/1/150">A Systematic Review of Open Source Clinical Software on GitHub for Improving Software Reuse in Smart Healthcare&lt;/a> by &lt;a href="https://sciprofiles.com/profile/563999">&lt;strong>Zhengru Shen&lt;/strong>&lt;/a> and &lt;a href="https://sciprofiles.com/profile/383240">&lt;strong>Marco Spruit&lt;/strong>&lt;/a>. They did a fantastic job by creating a paper that explains step-by-step how to do a systematic review of GitHub repositories!&lt;/p>
&lt;p>Let me give you a TL;DR (for more details, you need to read my paper later or the original paper link above):&lt;/p>
&lt;p>&lt;strong>Data Extraction&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>We do a preliminary search of our topic with some keywords or topics of our liking by using &lt;a href="https://github.com/search">GitHub Search&lt;/a> and &lt;a href="https://github.com/topics">GitHub Topics&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We try this in multiple languages to find the correct language (I am talking about natural languages such as English). Maybe our specific topic is more common in Spanish than English, or we need to analyze both. This is important to know.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Might we already have a time frame based on our literature review? This is important to take into account when searching for anything on GitHub.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We also need to decide: &lt;em>Are the Programming Languages important or not&lt;/em>? In general, what is needed from this search for our data analysis? For this, I recommend opening the &lt;a href="https://docs.github.com/en/rest/reference/search">REST API&amp;rsquo;s&lt;/a> reference manual: &lt;a href="https://docs.github.com/en/rest/reference/search">GitHub search REST API&lt;/a>. This has a list of things you can extract.&lt;/p>
&lt;p>4.1 Do I need some extra information besides the repository? Or the byte size usage is essential? If yes, check the rest of the API&amp;rsquo;s documentation. &lt;a href="https://docs.github.com/en/rest/reference">Check out the API&amp;rsquo;s Reference&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We connect to the &lt;a href="https://docs.github.com/en/rest/reference/search">GitHub search REST API&lt;/a> with our python script using a token: &lt;a href="https://docs.github.com/en/rest/overview/other-authentication-methods#basic-authentication">&lt;em>How to use a token to authentify?&lt;/em>&lt;/a> We are using Python and &lt;a href="https://github.com/PyGithub/PyGithub">PyGitHub&lt;/a>, which does most of the work for us.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We can define multiple queries for the search, if needed for your topic. GitHub allows you to search besides regular queries such as &amp;ldquo;&lt;em>scripting languages&lt;/em>&amp;rdquo; also for topics: &amp;ldquo;&lt;em>topic:scripting-languages&lt;/em>&amp;quot;. Using topic queries besides regular queries may increase the results of your search. Moreover, you can exclude things. For example, if you wanted to exclude all Visual Studio Extensions from your search, all you need to do is: &amp;ldquo;&lt;em>scripting languages NOT Visual+Studio&lt;/em>&amp;rdquo; (The &lt;strong>+&lt;/strong> is important because otherwise, it will ignore only &amp;ldquo;&lt;em>Visual&lt;/em>&amp;rdquo; and not &amp;ldquo;&lt;em>Visual Studio&lt;/em>&amp;quot;).
For more info about the search syntax check: &lt;a href="https://docs.github.com/en/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax">Understanding the search syntax&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>After the last step, you need to store the findings in some form. For example, you can keep your results in a CSV file or in a database.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Data Processing&lt;/strong>&lt;/p>
&lt;p>This is where my TL;DR ends since this highly depends on your topic. For example, you can do a &lt;em>Descriptive Analysis&lt;/em>, an example of which can be found in the original paper. You can also use &lt;em>Generalized Additive Models&lt;/em> to process the data. Moreover, you might need an AI to analyze all the README files, descriptions, etc., to extract the extra data you need. &lt;a href="https://sciprofiles.com/profile/563999">&lt;strong>Zhengru Shen&lt;/strong>&lt;/a> and &lt;a href="https://sciprofiles.com/profile/383240">&lt;strong>Marco Spruit&lt;/strong>&lt;/a> are using Watson to do some of their topic modelings (see &lt;a href="https://www.mdpi.com/2076-3417/9/1/150">2.4. Topic Modeling&lt;/a>).&lt;/p>
&lt;p>Anyways, as a game dev (or a game dev to be), I love sample code and practical things! This is why I really like the paper I mentioned before since the authors also provided the GitHub repository with the source code of the used code for their study. From an academic point of view, this delights my heart since I could reproduce their paper. The developer in me is happy since I have a script example for my paper! The original source code you can find here: &lt;a href="https://github.com/ianshan0915">ianshan0915&lt;/a>/&lt;a href="https://github.com/ianshan0915/clinical-opensource-projects">&lt;strong>clinical-opensource-projects&lt;/strong>&lt;/a> (a collection of python scripts).&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Warning:&lt;/strong> This repository is not made to be reused to be used for your own project. You can (like I did), but you still need to read the source code and find things you do not need. As I said, I &lt;strong>love&lt;/strong>, absolutely &lt;strong>love&lt;/strong> sample code! This is what this code is for.&lt;/p>
&lt;/blockquote>
&lt;p>What does this repo contain? Before we open the GitHub repo and clone it, let&amp;rsquo;s have a look at how they describe it in their paper:&lt;/p>
&lt;p>&amp;ldquo;&lt;em>The data extraction pipeline was written in Python using a third-party library, &lt;a href="https://github.com/PyGithub/PyGithub">PyGitHub&lt;/a>.&lt;/em>
&lt;em>The pipeline took the chosen search terms as input and received repository data in JSON. The JSON responses were first filtered and then converted to database records and pushed to tables in a MySQL database. Repositories with no description or no programming language specified were excluded from further analysis for the reason that clinical software was the focus of our study. The whole process is reproducible by running the Python scripts at Reference [22]. Moreover, replacing the search term with others scales the pipeline to other domains.&lt;/em>&amp;rdquo; (22: Source Codes of Open Source Clinical Software. Available online: &lt;a href="https://github.com/ianshan0915/clinical-">https://github.com/ianshan0915/clinical-&lt;/a> opensource-projects (accessed on 25 November 2018)) &lt;a href="https://www.mdpi.com/2076-3417/9/1/150">A Systematic Review of Open Source Clinical Software on GitHub for Improving Software Reuse in Smart Healthcare&lt;/a>&lt;/p>
&lt;p>After reading the description of their data extraction pipeline, we open the repo. However, there are no instructions on how to use/install the scripts in the README. But no worries, I have a quick summary of what you need:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/PyGithub/PyGithub">PyGitHub&lt;/a> communication with the GitHub REST API&lt;/li>
&lt;li>&lt;a href="https://pandas.pydata.org/">pandas&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/watson-developer-cloud/python-sdk">Watson Developer Cloud Python SDK&lt;/a> for analysing the readme files and descriptions&lt;/li>
&lt;li>&lt;a href="https://www.textrazor.com/docs/python">textrazor&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The conclusion for me is it is excellent that I have the code, but I would spend too much time bending it to my will. I can better follow their lead and write my own script, which is something I think all game devs know somehow.&lt;/p>
&lt;p>&lt;strong>My take on it&lt;/strong>&lt;/p>
&lt;p>Now, this is what I did, and I ended up with a small Python script that can be used for my purposes. If you need just data collection from GitHub, you can also use it: &lt;a href="https://github.com/simonrenger/collect-data-from-github">GitHub search query python&lt;/a>&lt;/p>
&lt;p>The script allows you to write a simple configuration JSON file:&lt;/p>
&lt;pre>&lt;code class="language-json">{
&amp;quot;token&amp;quot;: &amp;quot;my token&amp;quot;,
&amp;quot;readme_dir&amp;quot;: &amp;quot;./&amp;quot;,
&amp;quot;output&amp;quot;: &amp;quot;./&amp;quot;,
&amp;quot;format&amp;quot;: &amp;quot;CSV&amp;quot;,
&amp;quot;criteria&amp;quot;: {
&amp;quot;time&amp;quot;: {
&amp;quot;min&amp;quot;: 2010,
&amp;quot;max&amp;quot;: 2022
}
},
&amp;quot;terms&amp;quot;: [
&amp;quot;MY SEARCH QUERY&amp;quot;,
&amp;quot;MY SEARCH QUERY&amp;quot;,
],
&amp;quot;attrs&amp;quot;: [
&amp;quot;id&amp;quot;,
&amp;quot;full_name&amp;quot;,
]
}
&lt;/code>&lt;/pre>
&lt;p>To communicate with the GitHub API, you need a token you can obtain via your GitHub account. This field is optional, and you can also pass it as an argument to the script if you prefer this! As of writing, you have an hourly request rate of 5000 requests. Besides, the script obeys some cooldown time in between requests to not be locked out by the DDOS security of the API.
The output field lets you define where your collected data shall be stored. The file name will be &lt;code>repositories_DATE.[csv,json]&lt;/code> since I decided to spill out a CSV or JSON file, you can parse it later if you need to. If you need to download &lt;code>README&lt;/code> files, you also provide a &lt;code>readme_dir&lt;/code> field. They will be stored in there by &lt;code>repo + date&lt;/code>. If it is not present, the script assumes you do not need them. The criteria take the time frame from when to when do you need this, which will be used to collect repositories within the defined time frame.
The heart of your config is a list of the terms you are searching for:&lt;/p>
&lt;pre>&lt;code class="language-json"> &amp;quot;terms&amp;quot;: [
&amp;quot;topic:visual-scripting-language NOT Visual+Studio&amp;quot;,
&amp;quot;topic:visual-programming-language NOT Visual+Studio&amp;quot;,
&amp;quot;topic:visual-programming NOT Visual+Studio&amp;quot;,
&amp;quot;topic:visual-scripting NOT Visual+Studio&amp;quot;,
&amp;quot;topic:visual-programming-editor NOT Visual+Studio&amp;quot;,
&amp;quot;topic:dataflow-programming NOT Visual+Studio&amp;quot;
],
&lt;/code>&lt;/pre>
&lt;p>This will execute the criteria for those search terms every time!&lt;/p>
&lt;p>Last but not least, we have &lt;code>attrs&lt;/code> that allow you to define the fields you care about from the REST API repository. There is more info on what to write in there: &lt;a href="https://docs.github.com/en/rest/reference/search">GitHub search REST API&lt;/a>&lt;/p>
&lt;p>Now you might wonder how to actually run this script:&lt;/p>
&lt;pre>&lt;code class="language-bash">python github-search-query.py --help
&lt;/code>&lt;/pre>
&lt;p>The previous command will give you some ideas on how to run it. But there is a faster way:&lt;/p>
&lt;pre>&lt;code class="language-bash">python github-search-query.py config.json
&lt;/code>&lt;/pre>
&lt;p>And if you want to pass a token along:&lt;/p>
&lt;pre>&lt;code class="language-bash">python github-search-query.py --token my_token config.json
&lt;/code>&lt;/pre>
&lt;p>Well that&amp;rsquo;s pretty much it! Have fun data collecting!&lt;/p></description></item><item><title>Internship at OurMachinery</title><link>/project/themachinery/</link><pubDate>Tue, 01 Jun 2021 14:10:00 +0100</pubDate><guid>/project/themachinery/</guid><description>&lt;p>&lt;a href="http://www.ourmachinery.com">The Machinery&lt;/a> is a lightweight hackable modern game engine, written
in plain C.Written in plain C. Boots instantly. Responsive UI. Recompiles in seconds. Supports hot
reloading everywhere. Made to be hacked. Extend or modify with plugins. The flexibility of a custom
engine with the convenience of a ready-made one.Maximum performance. Fiber-based job system. Modern
rendering architecture.&lt;/p>
&lt;h2 id="my-main-responsibilities">My main responsibilities&lt;/h2>
&lt;p>&lt;strong>Tools Engineering&lt;/strong>&lt;/p>
&lt;p>During my internship I have been in charge for multiple improvements of the UX of the Editor. I have
introduced different views to the Asset Browser, which are modeled after the Windows Explorer: Grid,
List, Detail View. Besides, I have introduced the concept of asset labels, which allows for quick
grouping assets together with labels. Also the user can filter with those labels assets.&lt;/p>
&lt;p>The bigger tasks was to introduce a Debugger to our Visual Scripting language. This was were most of
my time went. I introduced breakpoints, flow visualization, step through and a watch value functionality.&lt;/p>
&lt;p>&lt;strong>QA Engineering&lt;/strong>&lt;/p>
&lt;p>I am working with GitHub Actions. It verifies that our engine can be built on Windows (&lt;code>msvc&lt;/code> and
&lt;code>clang-cl&lt;/code>) and Linux (our test environment is Ubuntu) with the clang tool chain. Besides I have
been adding functionality of integration tests to the CI system on the server, Integration tests and
unit tests are running side by side in specific intervals (Unit tests every commit or PR)&lt;/p></description></item><item><title>Services</title><link>/page/services/</link><pubDate>Fri, 01 May 2020 15:10:00 +0100</pubDate><guid>/page/services/</guid><description>&lt;h2 id="tools-development">Tools Development&lt;/h2>
&lt;p>My specializations are:&lt;/p>
&lt;ul>
&lt;li>UI / UX improvements&lt;/li>
&lt;li>commandline tools&lt;/li>
&lt;li>LLVM&amp;rsquo;s libclang tooling&lt;/li>
&lt;/ul>
&lt;h2 id="qa-engineering--management">QA Engineering / Management&lt;/h2>
&lt;p>My specializations are:&lt;/p>
&lt;ul>
&lt;li>setting up your QA Pipeline on GitHub / GitLab, Jenkins Server&lt;/li>
&lt;li>setting up tests: integration tests, unit tests&lt;/li>
&lt;li>integration of analytic tools&lt;/li>
&lt;li>improving existing pipelines with new tools&lt;/li>
&lt;/ul>
&lt;h2 id="teaching--coaching">Teaching / Coaching&lt;/h2>
&lt;ul>
&lt;li>Programming in C++&lt;/li>
&lt;li>Programming in C&lt;/li>
&lt;li>UI / UX fundamentals for Tools programming&lt;/li>
&lt;/ul>
&lt;h2 id="availability">Availability&lt;/h2>
&lt;p>I&amp;rsquo;m available for tools development and QA Engineering / Management, coaching and community
coordination. Please contact me if you are interested in &lt;a href="mailto:simon.renger@gmail.com">my services&lt;/a>.&lt;/p></description></item><item><title>Kari (Published)</title><link>/project/kari/</link><pubDate>Thu, 16 Apr 2020 00:10:00 +0100</pubDate><guid>/project/kari/</guid><description>&lt;p>Kari is a single player, adventure game in which you are stuck on the island of the Nordic gods. It is your job to complete quests given by the gods and the islands inhabitants in order to rebuild your boat.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/lthr3OE43MI" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;blockquote>
&lt;p>Game teaser, basic game overview&lt;/p>
&lt;/blockquote>
&lt;h2 id="my-main-responsibilities">My main responsibilities&lt;/h2>
&lt;p>I am mainly responsible for the QA pipeline and the Jenkins set up. I created a &lt;a href="https://github.com/simonrenger/jenkinsUtils">Jenkins Utility library&lt;/a>. This Jenkins groovy script collection helps us create the QA pipeline we want on the school&amp;rsquo;s Jenkins server. The library contains a collection of functions to communicate with Helix Swarm, Mantis and Discord. It supports the automated testing pipeline in Unreal Engine. Furthermore, it can pack and build UE4 projects.&lt;/p>
&lt;p>Besides, I have created a prototype of a Commit Testing Tool in WPF (Windows Presentation Foundation) and &lt;a href="http://materialdesigninxaml.net/">Material Design for WPF&lt;/a>.&lt;/p>
&lt;h2 id="p4committester---prototype">P4CommitTester - prototype&lt;/h2>
&lt;p>The purpose of this tool is it to test local or online Perforce changelists before they can be submitted or turned into a Swarm review. The tool has a simple &lt;code>toml&lt;/code> configuration file in which the automated tests can be specified (e.g. unit tests, map tests/ funcionality tests).&lt;/p>
&lt;p>One can also define pre/post steps. They will be executed before the actual tests run e.g. shelve all other changelists. This set up makes it possible for the tool to work with any kind of engine or software. When tests are finished, the tool will check the return code of the application and react appropriately (most test applications return &lt;code>EXIT_FAILURE&lt;/code> on failure).&lt;/p>
&lt;p>Currently, the tool can only communicate with the Jenkins API to run online tests / builds.&lt;/p>
&lt;h3 id="images">Images&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Changelist Overview&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;img src="/img/commits.png" alt="commit selection">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>List of all possible changelists. The default changelist is excluded because it is not really a changelist.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Selected Changelist Details&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;img src="/img/commitview.png" alt="commit selection">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>You can shelve (if it is a shelved changelist), unshelve and test the current changelist.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Test configuration&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;img src="/img/tests.png" alt="configure tests">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Toml file to configure the tool to run tests.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Test Results&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;img src="/img/tests_ok.png" alt="configure tests">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>In case the tests were ok the user can create a review or commit directly. If they were not successful the user would find the log here.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="project-overview">Project Overview&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Project Information&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Type:&lt;/td>
&lt;td>Single player, adventure game&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Duration:&lt;/td>
&lt;td>September 2019 - Ongoing Development&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Teamsize:&lt;/td>
&lt;td>6 programmers, 10 designers, 12 artists, 1 producer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Roles:&lt;/td>
&lt;td>QA &amp;amp; Tools engineer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Engine:&lt;/td>
&lt;td>Unreal Engine&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Platform:&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Languages:&lt;/td>
&lt;td>C++, Jenkins Groovy, C#&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Technologies:&lt;/td>
&lt;td>Jenkins, Visual Studio, C# UWP, C# WPF&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Imposter Effect Lightning Talk Meetingcpp 2019</title><link>/talk/imposter-effect-lightning-talk-meetingcpp19/</link><pubDate>Fri, 15 Nov 2019 20:50:00 +0100</pubDate><guid>/talk/imposter-effect-lightning-talk-meetingcpp19/</guid><description/></item><item><title>Skye (Published)</title><link>/project/seaplane/</link><pubDate>Sun, 29 Sep 2019 15:10:00 +0100</pubDate><guid>/project/seaplane/</guid><description>&lt;p>In this open world flight game my responsibilities vary from what is needed for the current state of development. Mainly I am focused with tools design and tools programming but also gameplay programming such as the camera. This project allows me to dive into Unityâs new Data-Oriented Technology Stack (DOTS) due to its massive performance promises especially in terms of level streaming.&lt;/p>
&lt;h2 id="my-main-responsibilities">My main responsibilities&lt;/h2>
&lt;p>Making sure that we utilize DOTS to its fullest extent, research into how DOTS can improve our gameplay and allow for benefits. Besides, I am responsible for implementing a quest system with the help of DOTS.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Project Information&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Type:&lt;/td>
&lt;td>Open World flight simulation game with focus on exploration an living world.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Duration:&lt;/td>
&lt;td>September 2019 - January 2020&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Teamsize:&lt;/td>
&lt;td>9 Programmers, 12 Designers, 8 Artists and 1 Producer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Roles:&lt;/td>
&lt;td>Tools programmer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Engine:&lt;/td>
&lt;td>Unity&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Platform:&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Languages:&lt;/td>
&lt;td>C#&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Technologies:&lt;/td>
&lt;td>Unity DOTS, Visual Studio, Jenkins, Perforce&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Project Highlights&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>We are utilizing the new data oriented systems (DOTS) to allow a better open-world experience.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>âTomorrow Engineâ</title><link>/project/tbsg/</link><pubDate>Wed, 01 May 2019 20:19:00 +0100</pubDate><guid>/project/tbsg/</guid><description>&lt;p>The tomorrow engine is a cross platform C++ game framework which allows the creation of deterministic linear card games. The player had to fight the opponent and the 3 monsters in the game. The game we created with this was called Raptoads. The Framework supported Playstation 4 and Windows 10.&lt;/p>
&lt;h2 id="gameplay-trailer">Gameplay trailer&lt;/h2>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/KfBd1vJM9wI" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="my-main-responsibilities">My main responsibilities&lt;/h2>
&lt;p>Apart from being the Tech lead / Team lead of the 11 programmers, I have been in charge for the core architecture. Besides, I have been responsible for implementing and designing the extensive tooling and pipeline for content creation and content management. The tooling was created in web technologies (electron &amp;amp; SQL Database), which allowed us for quick and rapid iterations.&lt;/p>
&lt;h3 id="core-architecture">Core Architecture&lt;/h3>
&lt;p>The application was split into four different modules. The Framework (TBSG) served the Client as well as the Server with basic utilities. Besides, we had the Network layer.&lt;/p>
&lt;p>When designing the modules, I followed the architecture guideline for our game: &lt;em>determinstic linear card games&lt;/em>. That resulted in a &amp;ldquo;data oriented&amp;rdquo; approach.&lt;/p>
&lt;h3 id="tooling---the-hub">Tooling - The Hub&lt;/h3>
&lt;p>The framework came with its own tooling which was written in JavaScript and Electron. It served as the main content creation tool for Designers. The tool offered the following functions:&lt;/p>
&lt;ul>
&lt;li>AI Optimization for the QA Test games&lt;/li>
&lt;li>Modifiying the underlying content database (SQL)&lt;/li>
&lt;li>source contol of our Lua card scripts&lt;/li>
&lt;li>UI Editor&lt;/li>
&lt;li>Lua Script validation&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Project Information&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Duration:&lt;/td>
&lt;td>16 Weeks - February to July 2019&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Team size:&lt;/td>
&lt;td>11 Programmers, 5 Designers, 8 Artists and 1 Producer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Roles:&lt;/td>
&lt;td>Tech Lead, Tools programmer, Scrum Master&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Engine:&lt;/td>
&lt;td>Custom cross-platform C++ Engine with Electron Tooling (Tomorrow Engine)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Platform:&lt;/td>
&lt;td>Windows, Playstation 4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Languages:&lt;/td>
&lt;td>C++, JavaScript, Lua, SQL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Technologies:&lt;/td>
&lt;td>Lua Scripting, Online Crossplay Multiplayer, Event/HTTP/UI handling with PS4 Support.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Project Highlights&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Scripting Pipeline: A Lua dialect which allowed designers to quickly develop with our tooling the card behaviour.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Scripting source control integration - via the tooling&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Google Drive integration &amp;amp; Sheets&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Utility AI - custimizeble via the tooling&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Custom Tooling written with Web technologies for quick iterations, tool of choice: Electron &amp;amp; MariaDB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Playstation 4 Support: The engine supported Playstation 4&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Tutoring</title><link>/project/tutoring/</link><pubDate>Sat, 15 Dec 2018 21:19:00 +0100</pubDate><guid>/project/tutoring/</guid><description>&lt;p>I have been giving workshops and lectures since my second year at the university. This is a great way of learning new skills and sharing the gained knowlegde with others. It also allows for a great flow of feedback. This is why I initiated the C++ learning comminity at our school (called C++ Guild)&lt;/p>
&lt;p>In the last two years I have been giving various lectures and workshops on the following topics:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Lecture / Workshop&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>How do programmers think?&lt;/td>
&lt;td>A lecture which uses minecraft to illustrate how abstract thinking works as well as how we can improve communication internally.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C++ type deduction&lt;/td>
&lt;td>In three workshops I have covered the basics of the C++ type deduction: template type deduction, auto type deduction, decltype deduction, decltype auto deduction, lambda type deduction.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C++ Compiler and linker steps&lt;/td>
&lt;td>This presentation explained the compiler steps in C++ and the linker steps.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Allocators are handles to the heap&lt;/td>
&lt;td>This workshop introduced the concept of polymorphic memory allocations in C++17 and how to use them as well as how to implement them in C++14. Besides, there was a brief introduction on Memory Management.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C++ special member function rules&lt;/td>
&lt;td>In this talk I covered the special member function rules in C++.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C# for designers and artists&lt;/td>
&lt;td>This is a workshop series of 16 weeks in which me and 2 other students taught C# to fellow Design and Art students. We ran this course in year 2 and also in year 3. We iterated on the idea and changed the concept to a Quest-based learning environment. This allows students to progress at their own pace because they have an overview on how they progress.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C++ Memory Managment: Introduction&lt;/td>
&lt;td>In two parts I introduced Memory Managment in C++ and the underlying concepts.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C++ Memory Managment: Write your own STL compatible allocator&lt;/td>
&lt;td>This workshop explained how to implement in C++ 14 an STL compatible polymorphic like allocator and memory resource environment. This workshop was targeted for Windows and Playstation 4 and was held in 4 parts.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item></channel></rss>