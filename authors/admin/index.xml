<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Simon Renger</title><link>/authors/admin/</link><atom:link href="/authors/admin/index.xml" rel="self" type="application/rss+xml"/><description>Simon Renger</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Simon Renger 2022</copyright><lastBuildDate>Tue, 21 Jun 2022 00:00:00 +0000</lastBuildDate><image><url>/img/icon-192.png</url><title>Simon Renger</title><link>/authors/admin/</link></image><item><title>Investigation into the criteria of embeddability of visual scripting languages within the domain of game development.</title><link>/publication/master_thesis/</link><pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate><guid>/publication/master_thesis/</guid><description/></item><item><title>Internship at OurMachinery</title><link>/project/themachinery/</link><pubDate>Tue, 01 Jun 2021 14:10:00 +0100</pubDate><guid>/project/themachinery/</guid><description>&lt;p>&lt;a href="http://www.ourmachinery.com">The Machinery&lt;/a> is a lightweight hackable modern game engine, written
in plain C.Written in plain C. Boots instantly. Responsive UI. Recompiles in seconds. Supports hot
reloading everywhere. Made to be hacked. Extend or modify with plugins. The flexibility of a custom
engine with the convenience of a ready-made one.Maximum performance. Fiber-based job system. Modern
rendering architecture.&lt;/p>
&lt;h2 id="my-main-responsibilities">My main responsibilities&lt;/h2>
&lt;p>&lt;strong>Tools Engineering&lt;/strong>&lt;/p>
&lt;p>During my internship I have been in charge for multiple improvements of the UX of the Editor. I have
introduced different views to the Asset Browser, which are modeled after the Windows Explorer: Grid,
List, Detail View. Besides, I have introduced the concept of asset labels, which allows for quick
grouping assets together with labels. Also the user can filter with those labels assets.&lt;/p>
&lt;p>The bigger tasks was to introduce a Debugger to our Visual Scripting language. This was were most of
my time went. I introduced breakpoints, flow visualization, step through and a watch value functionality.&lt;/p>
&lt;p>&lt;strong>QA Engineering&lt;/strong>&lt;/p>
&lt;p>I am working with GitHub Actions. It verifies that our engine can be built on Windows (&lt;code>msvc&lt;/code> and
&lt;code>clang-cl&lt;/code>) and Linux (our test environment is Ubuntu) with the clang tool chain. Besides I have
been adding functionality of integration tests to the CI system on the server, Integration tests and
unit tests are running side by side in specific intervals (Unit tests every commit or PR)&lt;/p></description></item><item><title>Services</title><link>/page/services/</link><pubDate>Fri, 01 May 2020 15:10:00 +0100</pubDate><guid>/page/services/</guid><description>&lt;h2 id="tools-development">Tools Development&lt;/h2>
&lt;p>My specializations are:&lt;/p>
&lt;ul>
&lt;li>UI / UX improvements&lt;/li>
&lt;li>commandline tools&lt;/li>
&lt;li>LLVM&amp;rsquo;s libclang tooling&lt;/li>
&lt;/ul>
&lt;h2 id="qa-engineering--management">QA Engineering / Management&lt;/h2>
&lt;p>My specializations are:&lt;/p>
&lt;ul>
&lt;li>setting up your QA Pipeline on GitHub / GitLab, Jenkins Server&lt;/li>
&lt;li>setting up tests: integration tests, unit tests&lt;/li>
&lt;li>integration of analytic tools&lt;/li>
&lt;li>improving existing pipelines with new tools&lt;/li>
&lt;/ul>
&lt;h2 id="teaching--coaching">Teaching / Coaching&lt;/h2>
&lt;ul>
&lt;li>Programming in C++&lt;/li>
&lt;li>Programming in C&lt;/li>
&lt;li>UI / UX fundamentals for Tools programming&lt;/li>
&lt;/ul>
&lt;h2 id="availability">Availability&lt;/h2>
&lt;p>I&amp;rsquo;m available for tools development and QA Engineering / Management, coaching and community
coordination. Please contact me if you are interested in &lt;a href="mailto:simon.renger@gmail.com">my services&lt;/a>.&lt;/p></description></item><item><title>Kari (Published)</title><link>/project/kari/</link><pubDate>Thu, 16 Apr 2020 00:10:00 +0100</pubDate><guid>/project/kari/</guid><description>&lt;p>Kari is a single player, adventure game in which you are stuck on the island of the Nordic gods. It is your job to complete quests given by the gods and the islands inhabitants in order to rebuild your boat.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/lthr3OE43MI" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;blockquote>
&lt;p>Game teaser, basic game overview&lt;/p>
&lt;/blockquote>
&lt;h2 id="my-main-responsibilities">My main responsibilities&lt;/h2>
&lt;p>I am mainly responsible for the QA pipeline and the Jenkins set up. I created a &lt;a href="https://github.com/simonrenger/jenkinsUtils">Jenkins Utility library&lt;/a>. This Jenkins groovy script collection helps us create the QA pipeline we want on the school&amp;rsquo;s Jenkins server. The library contains a collection of functions to communicate with Helix Swarm, Mantis and Discord. It supports the automated testing pipeline in Unreal Engine. Furthermore, it can pack and build UE4 projects.&lt;/p>
&lt;p>Besides, I have created a prototype of a Commit Testing Tool in WPF (Windows Presentation Foundation) and &lt;a href="http://materialdesigninxaml.net/">Material Design for WPF&lt;/a>.&lt;/p>
&lt;h2 id="p4committester---prototype">P4CommitTester - prototype&lt;/h2>
&lt;p>The purpose of this tool is it to test local or online Perforce changelists before they can be submitted or turned into a Swarm review. The tool has a simple &lt;code>toml&lt;/code> configuration file in which the automated tests can be specified (e.g. unit tests, map tests/ funcionality tests).&lt;/p>
&lt;p>One can also define pre/post steps. They will be executed before the actual tests run e.g. shelve all other changelists. This set up makes it possible for the tool to work with any kind of engine or software. When tests are finished, the tool will check the return code of the application and react appropriately (most test applications return &lt;code>EXIT_FAILURE&lt;/code> on failure).&lt;/p>
&lt;p>Currently, the tool can only communicate with the Jenkins API to run online tests / builds.&lt;/p>
&lt;h3 id="images">Images&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Changelist Overview&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;img src="/img/commits.png" alt="commit selection">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>List of all possible changelists. The default changelist is excluded because it is not really a changelist.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Selected Changelist Details&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;img src="/img/commitview.png" alt="commit selection">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>You can shelve (if it is a shelved changelist), unshelve and test the current changelist.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Test configuration&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;img src="/img/tests.png" alt="configure tests">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Toml file to configure the tool to run tests.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Test Results&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;img src="/img/tests_ok.png" alt="configure tests">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>In case the tests were ok the user can create a review or commit directly. If they were not successful the user would find the log here.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="project-overview">Project Overview&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Project Information&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Type:&lt;/td>
&lt;td>Single player, adventure game&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Duration:&lt;/td>
&lt;td>September 2019 - Ongoing Development&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Teamsize:&lt;/td>
&lt;td>6 programmers, 10 designers, 12 artists, 1 producer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Roles:&lt;/td>
&lt;td>QA &amp;amp; Tools engineer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Engine:&lt;/td>
&lt;td>Unreal Engine&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Platform:&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Languages:&lt;/td>
&lt;td>C++, Jenkins Groovy, C#&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Technologies:&lt;/td>
&lt;td>Jenkins, Visual Studio, C# UWP, C# WPF&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Imposter Effect Lightning Talk Meetingcpp 2019</title><link>/talk/imposter-effect-lightning-talk-meetingcpp19/</link><pubDate>Fri, 15 Nov 2019 20:50:00 +0100</pubDate><guid>/talk/imposter-effect-lightning-talk-meetingcpp19/</guid><description/></item><item><title>Skye (Published)</title><link>/project/seaplane/</link><pubDate>Sun, 29 Sep 2019 15:10:00 +0100</pubDate><guid>/project/seaplane/</guid><description>&lt;p>In this open world flight game my responsibilities vary from what is needed for the current state of development. Mainly I am focused with tools design and tools programming but also gameplay programming such as the camera. This project allows me to dive into Unity’s new Data-Oriented Technology Stack (DOTS) due to its massive performance promises especially in terms of level streaming.&lt;/p>
&lt;h2 id="my-main-responsibilities">My main responsibilities&lt;/h2>
&lt;p>Making sure that we utilize DOTS to its fullest extent, research into how DOTS can improve our gameplay and allow for benefits. Besides, I am responsible for implementing a quest system with the help of DOTS.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Project Information&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Type:&lt;/td>
&lt;td>Open World flight simulation game with focus on exploration an living world.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Duration:&lt;/td>
&lt;td>September 2019 - January 2020&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Teamsize:&lt;/td>
&lt;td>9 Programmers, 12 Designers, 8 Artists and 1 Producer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Roles:&lt;/td>
&lt;td>Tools programmer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Engine:&lt;/td>
&lt;td>Unity&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Platform:&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Languages:&lt;/td>
&lt;td>C#&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Technologies:&lt;/td>
&lt;td>Unity DOTS, Visual Studio, Jenkins, Perforce&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Project Highlights&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>We are utilizing the new data oriented systems (DOTS) to allow a better open-world experience.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>“Tomorrow Engine“</title><link>/project/tbsg/</link><pubDate>Wed, 01 May 2019 20:19:00 +0100</pubDate><guid>/project/tbsg/</guid><description>&lt;p>The tomorrow engine is a cross platform C++ game framework which allows the creation of deterministic linear card games. The player had to fight the opponent and the 3 monsters in the game. The game we created with this was called Raptoads. The Framework supported Playstation 4 and Windows 10.&lt;/p>
&lt;h2 id="gameplay-trailer">Gameplay trailer&lt;/h2>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/KfBd1vJM9wI" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="my-main-responsibilities">My main responsibilities&lt;/h2>
&lt;p>Apart from being the Tech lead / Team lead of the 11 programmers, I have been in charge for the core architecture. Besides, I have been responsible for implementing and designing the extensive tooling and pipeline for content creation and content management. The tooling was created in web technologies (electron &amp;amp; SQL Database), which allowed us for quick and rapid iterations.&lt;/p>
&lt;h3 id="core-architecture">Core Architecture&lt;/h3>
&lt;p>The application was split into four different modules. The Framework (TBSG) served the Client as well as the Server with basic utilities. Besides, we had the Network layer.&lt;/p>
&lt;p>When designing the modules, I followed the architecture guideline for our game: &lt;em>determinstic linear card games&lt;/em>. That resulted in a &amp;ldquo;data oriented&amp;rdquo; approach.&lt;/p>
&lt;h3 id="tooling---the-hub">Tooling - The Hub&lt;/h3>
&lt;p>The framework came with its own tooling which was written in JavaScript and Electron. It served as the main content creation tool for Designers. The tool offered the following functions:&lt;/p>
&lt;ul>
&lt;li>AI Optimization for the QA Test games&lt;/li>
&lt;li>Modifiying the underlying content database (SQL)&lt;/li>
&lt;li>source contol of our Lua card scripts&lt;/li>
&lt;li>UI Editor&lt;/li>
&lt;li>Lua Script validation&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Project Information&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Duration:&lt;/td>
&lt;td>16 Weeks - February to July 2019&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Team size:&lt;/td>
&lt;td>11 Programmers, 5 Designers, 8 Artists and 1 Producer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Roles:&lt;/td>
&lt;td>Tech Lead, Tools programmer, Scrum Master&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Engine:&lt;/td>
&lt;td>Custom cross-platform C++ Engine with Electron Tooling (Tomorrow Engine)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Platform:&lt;/td>
&lt;td>Windows, Playstation 4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Languages:&lt;/td>
&lt;td>C++, JavaScript, Lua, SQL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Technologies:&lt;/td>
&lt;td>Lua Scripting, Online Crossplay Multiplayer, Event/HTTP/UI handling with PS4 Support.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Project Highlights&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Scripting Pipeline: A Lua dialect which allowed designers to quickly develop with our tooling the card behaviour.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Scripting source control integration - via the tooling&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Google Drive integration &amp;amp; Sheets&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Utility AI - custimizeble via the tooling&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Custom Tooling written with Web technologies for quick iterations, tool of choice: Electron &amp;amp; MariaDB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Playstation 4 Support: The engine supported Playstation 4&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Tutoring</title><link>/project/tutoring/</link><pubDate>Sat, 15 Dec 2018 21:19:00 +0100</pubDate><guid>/project/tutoring/</guid><description>&lt;p>I have been giving workshops and lectures since my second year at the university. This is a great way of learning new skills and sharing the gained knowlegde with others. It also allows for a great flow of feedback. This is why I initiated the C++ learning comminity at our school (called C++ Guild)&lt;/p>
&lt;p>In the last two years I have been giving various lectures and workshops on the following topics:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Lecture / Workshop&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>How do programmers think?&lt;/td>
&lt;td>A lecture which uses minecraft to illustrate how abstract thinking works as well as how we can improve communication internally.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C++ type deduction&lt;/td>
&lt;td>In three workshops I have covered the basics of the C++ type deduction: template type deduction, auto type deduction, decltype deduction, decltype auto deduction, lambda type deduction.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C++ Compiler and linker steps&lt;/td>
&lt;td>This presentation explained the compiler steps in C++ and the linker steps.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Allocators are handles to the heap&lt;/td>
&lt;td>This workshop introduced the concept of polymorphic memory allocations in C++17 and how to use them as well as how to implement them in C++14. Besides, there was a brief introduction on Memory Management.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C++ special member function rules&lt;/td>
&lt;td>In this talk I covered the special member function rules in C++.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C# for designers and artists&lt;/td>
&lt;td>This is a workshop series of 16 weeks in which me and 2 other students taught C# to fellow Design and Art students. We ran this course in year 2 and also in year 3. We iterated on the idea and changed the concept to a Quest-based learning environment. This allows students to progress at their own pace because they have an overview on how they progress.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C++ Memory Managment: Introduction&lt;/td>
&lt;td>In two parts I introduced Memory Managment in C++ and the underlying concepts.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C++ Memory Managment: Write your own STL compatible allocator&lt;/td>
&lt;td>This workshop explained how to implement in C++ 14 an STL compatible polymorphic like allocator and memory resource environment. This workshop was targeted for Windows and Playstation 4 and was held in 4 parts.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item></channel></rss>