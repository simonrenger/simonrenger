<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>research | Simon Renger</title><link>/tags/research/</link><atom:link href="/tags/research/index.xml" rel="self" type="application/rss+xml"/><description>research</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Simon Renger 2022</copyright><lastBuildDate>Wed, 22 Jun 2022 00:00:00 +0100</lastBuildDate><image><url>/img/icon-192.png</url><title>research</title><link>/tags/research/</link></image><item><title>How could an embeddable visual scripting language look like?</title><link>/posts/how_could_an_embeddable_visual_scripting_language_look_like/</link><pubDate>Wed, 22 Jun 2022 00:00:00 +0100</pubDate><guid>/posts/how_could_an_embeddable_visual_scripting_language_look_like/</guid><description>&lt;p>Once, during my work on the &lt;em>sadly never published&lt;/em> game Reptoads – a round-based deterministic multiplayer cooperative card game, I got asked by different members of the art and design team: why can’t we have a visual scripting language such as Blueprints or Shader Graph for either the gameplay code or the visuals? My answer was always the same: we don’t have enough time to implement such a tool. This question, however, got stuck in my mind and I started searching for a “Lua” of the visual scripting languages just to find&amp;hellip; nothing. Roughly three years later, the same question kept coming up in different projects, while my answer and my research results stayed the same. This made me curious, &lt;em>why is there no such thing as an embeddable visual scripting language that can be used?&lt;/em>&lt;/p>
&lt;p>Asking myself why is there no such language and how would one look like, led me to write my Master thesis with the title: &lt;a href="https://linktr.ee/simonrenger">“Investigation into the criteria of embeddability of visual scripting languages within the domain of game development”&lt;/a>. In my research paper I composed a list of potential criteria that classify a visual scripting language (VSL) as embeddable. In this article I will go through these criteria and design a hypothetical embeddable VSL, which I called &lt;a href="https://simonrenger.github.io/noodle/">Noodle&lt;/a>. This will be Part 1 of a series of articles focused on creating a usable VSL prototype.&lt;/p>
&lt;p>You might think now: &lt;em>hold on for a second! Aren’t there lots of tools doing similar things? Do we &lt;strong>really&lt;/strong> need to reinvent the wheel?&lt;/em>&lt;/p>
&lt;p>Yes, your instinct is right, there are some well-known solutions out there like Unreal Engine’s Blueprints or Unity’s Visual Scripting, but you simply cannot take their scripting runtime out and put this into your specific 3D retro shooter game engine. Now you might want to say: &lt;em>okay then, I will just use scripting, there are a lot of scripting languages out there (Lua, luau, wren, daScript, anglescript etc.)&lt;/em>. That argument is also valid but what happens when you look for a designer to help you with your indie game and all you can find are designers that have only worked with Unity or Unreal before. In those cases, it would be better to tell them that there is a language that works like Blueprints or is less complicated than C#, especially since it is easier to learn a VSL than a normal scripting language, as literature suggests [1]–[3].&lt;/p>
&lt;h2 id="some-thoughts-about-visual-scripting">Some thoughts about visual scripting&lt;/h2>
&lt;p>First of all, I need to acknowledge that visual scripting is not the silver bullet for all problems in game development and often does more harm than good, especially when it comes to performance and maintainability (&lt;a href="https://80.lv/articles/blueprints-from-hell-share-the-horror/">Blueprints from Hell: Share The Horror&lt;/a>). I want to stress that this article is not pro or against visual scripting languages but rather sees it as a tool, just as with any other programming language (yes, a VSL is a programming language). Of course, there might be other tools out there that do a specific job better but it always depends on the use case and the requirements. During my Masters in Game Technology, I had the chance to interview industry professionals and one of my participants emphasized that the requirements of the game are the most important factor when deciding what tech to choose when working on a game.&lt;/p>
&lt;p>Another aspect to consider is what are we intending to use the visual scripting language for. During my research, all my interviewees stated that they see the benefits of a VSL in being able to quickly prototype features and its quick iteration times overall. Also, a VSL is perfectly made for certain tasks such as processing sequences. While for others it might be not the right tool such as performance-critical code passes, unless the graph is compiled to native code and heavily optimized. Moreover, VSLs are used for gluing systems together, as industry experts and literature suggest [$$]. In addition, VSLs are often used to handle UI events, for example in the UI workflow, but also for the game logic in general. They are also used as a domain specific language for workflows such as Shader / Material editing or state machines.&lt;/p>
&lt;p>All these different aspects of possible use cases make it quite difficult to define the best-fit solution. Since it is not easy to determine the right requirements for each of those fields, the idea is to create a generalized model of a language that can be used for these different aspects. I am fully aware that this might not be the ultimate solution that fits all cases.&lt;/p>
&lt;h2 id="the-basic-language-concepts">The basic language concepts&lt;/h2>
&lt;p>I will discuss the core concepts of Noodle by following the result structure of my paper. My paper found five major aspects that are potentially important when designing a language framework with embeddability in mind. My thesis defines them as follows: 1.&lt;em>performance and the identified subcategories, 2.mechanical aspects of embedding software and their respective subcategories, 3.license, 4.documentation, 5.tooling and workflow&lt;/em>*.* While we look into each of these aspects, we define what consequences it has for Noodle.&lt;/p>
&lt;p>&lt;strong>General design overview&lt;/strong>&lt;/p>
&lt;p>Before we dive deep into these findings, I will briefly describe the main characteristics of Noodle. Noodle will be diagram-based [1], [4] which means that the language is graph-based and the execution can be followed by traversing nodes. As my research shows, this is the most commonly used VSL form in game engines, e.g., in Unreal Engine, Unity and Godot [5]–[8]. A popular alternative is the block-based design. A block-based design is used for Scratch and Google’s Blockly [9]–[11] but it is not often used in games. Moreover, Noodle will offer pure nodes, nodes without side effects and nodes that may have side effects [12]. They are differently identified by either having an “execution” wire/connection or just a data flow connection. This allows the dialect designer to decide if they need support for one of these concepts or both, depending on the use case requirements. On its own, the language is not event-based, so a graph can be triggered at any node at any point in time by the runtime. However, the dialect designer can specify nodes that can be triggered. These nodes can be used as entry points which would allow an event-based structure if needed. All these decisions are based on what is common in tools used in the game industry, be it Godot’s visual scripting or Unreal Engine’s Material Editor [8], [13]–[17].&lt;/p>
&lt;p>Noodle’s design idea of being a composable language that one can shape depending on the users’ needs, or how literature would call it “extending” by being an extension language, is greatly inspired by the works of Hisham Muhammad and Roberto Ierusalimschy in their paper about the used API design of the &lt;a href="https://www.lua.org/">Lua programming language&lt;/a> [18]–[21]. Since we are talking about a visual scripting language which logic is expressed in composing visual elements [22], we need some form of specification. In Noodle the dialect is described via a protocol: what nodes it supports, what kind of types are supported, etc. Moreover, Noodle supports internal modules, i.e., subgraphs that can help organizing your graph, as well as external modules, if a module resolve function is provided. If not, only internal modules will work. However, the defined protocol might differ from dialect to dialect, depending on the use of the language. We will talk about the protocol an its uses later.&lt;/p>
&lt;p>The next few paragraphs will now take the findings of my study and describe the impact they might have on Noodle.&lt;/p>
&lt;p>&lt;strong>Performance&lt;/strong>&lt;/p>
&lt;p>&lt;em>Development performance&lt;/em>
One of the most important factors for the game industry is the ability to perform quick iteration cycles and to be able to quickly prototype a feature [23, pp. 956–957] [20], [24]. Many interviewees have expressed the opinion that script hot reloading is a crucial feature they would expect from a VSL. It has been shown also in literature [23] that script hot reloading is a great feature, that supports quick iteration and rapid prototyping. Based on these observations, Noodle will support script hot reloading to empower users with quick prototyping.&lt;/p>
&lt;p>&lt;em>Runtime performance&lt;/em>
When talking to any game programmer, they will most likely make a similar statement as many of my study participants, that memory is the number one bottleneck in games. Although, it greatly depends on the requirements of the game and how dramatic the runtime performance is influenced by the right memory access patterns or the right allocation strategies. Therefore, it is not surprising that most of the participants expressed their opinions on how memory management should work. The major conclusion is that in a VSL, we know from early on what kind of data we will handle since all inputs and outputs of all nodes are known at translation time, therefore the graph could either allocate a large chunk of memory and manage that like in &lt;a href="https://www.fastly.com/blog/webassembly-memory-management-guide-for-c-rust-programmers">WebAssembly&lt;/a> where “&amp;hellip;opcodes accessing memory are not given addresses, but offsets relative to the beginning of a linear memory segment whose size is always known.” The memory model of Noodle will follow the same mentality and will at the beginning allocate the needed memory through a memory allocator interface that the user can modify, if needed. If memory needs to be accessed in a form of a pointer, Noodle will not be able to do anything with these pointers, so it will just pass them down to native functions that are able to understand them.&lt;/p>
&lt;p>When it comes to a scripting language and a VSL, which is nothing else than a subcategory [1], [25], the execution method is important. Robert Nystrom states in both of his books “Crafting interpreters” and “Game programming patterns” [26, p. 17], [27, pp. 155–179] that a tree-walking interpreter, a form of an interpreter that traverses the graph by recursively calling the nodes, is slower than compiling the graph down to bytecode that is executed in a virtual machine (VM) or transpiled to a different source code [26, pp. 16–20], [28], [27, pp. 155–179] ,[23, pp. 52,954-958]. Based on these findings, Noodle will compile to bytecode with the intention that the user can compile a Noodle graph representation to C and compile to native code depending on their platform as a last shipping step (if providing a backend). This transpiling or compiling to native code has been mentioned in the interviews as an important feature. It can also be considered to allow the language to enable hot patching of the native generated code. This means that if something is wrong with the compiled C code, a content update of a bytecode compiled graph can be used to hot patch this part of the code.&lt;/p>
&lt;p>&lt;strong>Mechanical aspects of embedding software&lt;/strong>&lt;/p>
&lt;p>&lt;em>API design&lt;/em>
As described in the above-mentioned papers from H.Muhammad and R.Ierusalimschy about the API design of Lua and other scripting languages such as Perl or Python, it can be concluded that an API should be flexible to provide the ability to extend the underlaying language not in a verbose (like Perl) manner, but more in a concise declarative manner. This view is supported by my interviewees who describe that an API should be able to bind, for example, an external editor but should also be small enough to be easily manageable. Moreover, academia as well as the interviewed industry professionals argue that the API should be written in the C programming language or at least provide C foreign function interface, since C is considered as the lingua franca of programming languages [18]–[21]. To provide maximal portability from an API point of view, the header files of Noodle will be written in C99 and the implementation will be done in C11.&lt;/p>
&lt;p>&lt;em>Dependencies&lt;/em>
The game industry is notorious for reinventing the wheel [29], [30] and this problem might stem from the platforms we are catering to and the software we are working with. Therefore, having many dependencies that we need to maintain and maybe port to different platforms is not desired. This is what my research suggests and what an industry professional states in an interview: “When you develop a commercial product, you also need to consider two things. Since dependencies might be taken offline at any time, it is very important to have your own copy of them. Also, for various certification on platforms you need to keep in mind that they perform security audits on those dependencies.”. These insights led to the decision for Noodle to have no external dependencies besides the OS dependencies on the platforms it supports.&lt;/p>
&lt;p>&lt;strong>License &amp;amp; documentation&lt;/strong>&lt;/p>
&lt;p>The game industry caters for many different platforms with different requirements, some are open source, some are not. Therefore, the license needs to be permissive since it is not always possible to open-source certain aspects of the entire codebase due to NDA regulations. This is the reason why Noodle will use the MIT license or the Apache License, Version 2.0, depending on the user’s need.&lt;/p>
&lt;p>Besides the license, a good documentation on how to embed the language into your game framework is needed. My thesis research has shown that it is expected by users for some form of online documentation and samples to exist. Therefore, Noodle should provide online documentation in form of a GitHub Page but also examples on how to bind the language.&lt;/p>
&lt;p>&lt;strong>Workflow &amp;amp; tools&lt;/strong>&lt;/p>
&lt;p>So far, none of the categories of embeddability are really different from what one would expect from a regular scripting language. In fact, what literature says is that they are nearly matching, and &lt;a href="https://softwareengineering.stackexchange.com/questions/403911/what-makes-a-scripting-language-embeddable">Software Engineering Stack Exchange&lt;/a> confirms it. The major difference explained in literature by B.Myers already in 1989 in “Taxonomies of Visual Programming” [1] and in the works of Nystrom and J.Gregory [23], [27], the biggest challenge for a VSL is the UI/UX aspect and mainly the visual scripting environment (VSE). A VSE can be seen as the integrated development environment (IDE) for VSLs. My thesis concluded that among all aspects, workflow and tooling are the most important.&lt;/p>
&lt;p>Unfortunately, there is not much existing research on what qualifies a good visual scripting environment within the domain of game development. If we look outside of the game industry, there are a few papers on this topic, but they mostly describe the design of visual scripting environments for block-based languages, since they are mainly used for educational purposes. Although the industry professionals participating in my study shared some important insights, proper academic research would be needed to make academic claims. However, for this prototype the statements of industry professionals and the scarce UI / UX research on visual scripting environments will base the foundation for Noodle’s UI / UX.&lt;/p>
&lt;p>The industry professionals stated that one cannot just use Notepad or Visual Studio to edit the “source code” of a VSL, therefore they would expect either a fully-fletched editor to come with the VSL or a flexible API to allow them to bind an editor themselves. One of the participants stated that they would use the provided editor to get acquainted with the language and then use the API to build their own that matches the paradigms and needs of their own ecosystem. Hence, Noodle will come with a prototype of an editor and a flexible API that allows the user to bind a custom editor.&lt;/p>
&lt;p>For the first prototype, the language will come with a Visual Studio Code extension that enables the editor to understand Noodle files, while the editor will communicate with the Noodle runtime via the WebSocket API by using the protocol described later. Whenever a change occurs in the editor, the updated graph will be sent to the runtime and the runtime user can decide if it is needed to recompile the current graph and swap it with the new changes. The goal is to provide an embeddable editor view written in C or C++ as an external tool on top of the Noodle APIs.&lt;/p>
&lt;p>The mentioned WebSocket-based API allows network communication to other software that might be the editor. The VS Code extension will be part of the first prototype to demonstrate this communication feature. A network-based communication might be more suitable for games that separate game runtime and editor runtime, while the API communication via the C interface might be better suited for custom game engines that have a built-in editor. Important to mention is that the WebSocket API is purely optional.&lt;/p>
&lt;p>Since debugging and visualizing what is happening within the VSL has been classified as very important, Noodle should come with an ability to attach a debugger to it. In the first prototype we can try to make use of the VS Code Debugger framework and provide the ability to connect to it.&lt;/p>
&lt;p>A Noodle document will be in JSON format that can be parsed with any JSON parser and can be checked in source control like a normal text file. The main reason why JSON has been chosen is that it provides a better source control management support. Also, it can be diffed without big issues, while for example a binary file format would cause source control issues (google ‘Blueprints and source control’).&lt;/p>
&lt;h2 id="the-noodle-protocol">The Noodle Protocol&lt;/h2>
&lt;p>As mentioned above, Noodle runs on a protocol that gives an overview of what nodes are available and what types can the runtime understand. This indicates that Noodle can be either statically or more dynamically typed, depending on the needs of the dialect designer. The Noodle protocol can be generated via the API and will return either a protocol struct that can be used via the C interface or a JSON representation that can be used otherwise in tools or in the WebSocket API.&lt;/p>
&lt;p>Besides the Noodle protocol that describes the language, there is the &lt;em>noodle file&lt;/em> or &lt;em>noodle document –&lt;/em> the script file. One can see the protocol like a header file in C or C++ and a noodle file as the source file. The noodle document describes the current file the VM is processing. As mentioned above, each noodle file may contain subgraphs (internal modules) or if enabled, external modules. In principle, every noodle document contains three regions:&lt;/p>
&lt;p>&lt;em>Protocol&lt;/em> – this region describes the meta data of the current language dialect. The VM will check this region and verify that the name of the dialect, as well as the version, are matching. If not, the file cannot be passed. Migration can be implemented with this approach.&lt;/p>
&lt;p>&lt;em>Graph&lt;/em> – this region describes the actual data of the graph, which includes the modules, nodes, connections, and the data.&lt;/p>
&lt;p>&lt;em>Editor&lt;/em> – implementation defined region that can be used to define editor specific data such as position of nodes, etc. This region is not used by the VM in any way.&lt;/p>
&lt;p>The &lt;em>graph&lt;/em> region is the only region where the VM interpreter needs to understand the data of the file, while the &lt;em>protocol&lt;/em> region is there to make sure that the noodle file matches this dialect.&lt;/p>
&lt;p>For more in depth information checkout the &lt;a href="https://simonrenger.github.io/noodle/lang/index.html">Noodle Language Specifications&lt;/a>&lt;/p>
&lt;h2 id="next-steps">Next steps&lt;/h2>
&lt;p>This article has described so far what one could expect from a visual scripting language to define the VM as potentially embeddable and has illustrated this by giving concrete examples per category on the prototype language Noodle. Along the series of articles, we will take this further and go through each step of implementing the language, which will function as practical application of my theoretical study.&lt;/p>
&lt;p>In the next article we will discuss the protocol and the document design a little bit more but will mainly focus on the API design and the editor implementation in VS code. This will also be the first practical test of the protocol and the API.&lt;/p>
&lt;p>For more information, follow me on Twitter: &lt;a href="https://twitter.com/kazum93">Kazum93&lt;/a> or check the &lt;a href="https://simonrenger.github.io/noodle/">Noodle page&lt;/a> on GitHub. Also, if you are interested in reading my research paper that I have been referring to all the time, you can find it on R&lt;a href="https://linktr.ee/simonrenger">esearchGate&lt;/a> or my &lt;a href="https://linktr.ee/simonrenger">website&lt;/a>.&lt;/p>
&lt;p>[1] B. A. Myers, “Taxonomies of Visual Programming,” 1989.&lt;/p>
&lt;p>[2] M. F. Msiska and L. Van Zijl, “From visual scripting to Lua,” &lt;em>ACM Int. Conf. Proceeding Ser.&lt;/em>, pp. 94–99, 2012, doi: 10.1145/2389836.2389848.&lt;/p>
&lt;p>[3] M. M. Burnett, “Visual object-oriented programming,” &lt;em>Proc. Conf. Object-Oriented Program. Syst. Lang. Appl. OOPSLA&lt;/em>, vol. Part F1296, no. April 1994, pp. 127–129, 1993, doi: 10.1145/260303.261240.&lt;/p>
&lt;p>[4] M. M. Burnett and M. J. Baker, “A Classification System for Visual Programming Languages,” &lt;em>J. Vis. Lang. Comput.&lt;/em>, vol. 5, no. 3, pp. 287–300, 1994, doi: &lt;a href="https://doi.org/10.1006/jvlc.1994.1015">https://doi.org/10.1006/jvlc.1994.1015&lt;/a>.&lt;/p>
&lt;p>[5] E. Games, “Blueprints,” 2021. &lt;a href="https://docs.unrealengine.com/4.27/en-US/ProgrammingAndScripting/Blueprints/">https://docs.unrealengine.com/4.27/en-US/ProgrammingAndScripting/Blueprints/&lt;/a>&lt;/p>
&lt;p>[6] E. Games, “Kismet Visual Scripting.” &lt;a href="https://docs.unrealengine.com/udk/Three/KismetHome.html">https://docs.unrealengine.com/udk/Three/KismetHome.html&lt;/a>&lt;/p>
&lt;p>[7] Unity Technology, “Bolt Documentation.” &lt;a href="https://docs.unity3d.com/bolt/1.4/manual/index.html">https://docs.unity3d.com/bolt/1.4/manual/index.html&lt;/a>&lt;/p>
&lt;p>[8] G. Team, “Godot Visual Scripting.” &lt;a href="https://docs.godotengine.org/en/stable/getting_started/scripting/visual_script/getting_started.html">https://docs.godotengine.org/en/stable/getting_started/scripting/visual_script/getting_started.html&lt;/a>&lt;/p>
&lt;p>[9] Google, “Blocky.” &lt;a href="https://developers.google.com/blockly">https://developers.google.com/blockly&lt;/a> (accessed Apr. 14, 2022).&lt;/p>
&lt;p>[10] J. Maloney, M. Resnick, N. Rusk, B. Silverman, and E. Eastmond, “The scratch programming language and environment,” &lt;em>ACM Trans. Comput. Educ.&lt;/em>, vol. 10, no. 4, pp. 1–15, 2010, doi: 10.1145/1868358.1868363.&lt;/p>
&lt;p>[11] MIT, “Scratch.” &lt;a href="https://scratch.mit.edu/">https://scratch.mit.edu/&lt;/a>&lt;/p>
&lt;p>[12] P. Wadler, “The essence of functional ( Invited programming talk ) recursive a compiler language,” &lt;em>Proc. 19th ACM SIGPLANSIGACT Symp. Princ. Program. Lang.&lt;/em>, pp. 1–14, 1992.&lt;/p>
&lt;p>[13] G. Team, “VisualShaders.” &lt;a href="https://docs.godotengine.org/en/stable/tutorials/shading/visual_shaders.html">https://docs.godotengine.org/en/stable/tutorials/shading/visual_shaders.html&lt;/a>&lt;/p>
&lt;p>[14] “Unreal Engine 4 Material Editor.” &lt;a href="https://docs.unrealengine.com/4.27/en-US/RenderingAndGraphics/Materials/Editor/">https://docs.unrealengine.com/4.27/en-US/RenderingAndGraphics/Materials/Editor/&lt;/a>&lt;/p>
&lt;p>[15] Unity Technology, “Shader Graph”, [Online]. Available: &lt;a href="https://unity.com/shader-graph">https://unity.com/shader-graph&lt;/a>&lt;/p>
&lt;p>[16] M. Autodesk, “Maya Node Editor.” [Online]. Available: &lt;a href="https://knowledge.autodesk.com/support/maya/learn-explore/caas/CloudHelp/cloudhelp/2019/ENU/Maya-Basics/files/GUID-23277302-6665-465F-8579-9BC734228F69-htm.html">https://knowledge.autodesk.com/support/maya/learn-explore/caas/CloudHelp/cloudhelp/2019/ENU/Maya-Basics/files/GUID-23277302-6665-465F-8579-9BC734228F69-htm.html&lt;/a>&lt;/p>
&lt;p>[17] B. F. Blender 3D, “Shader Editor.” &lt;a href="https://docs.blender.org/manual/en/latest/editors/shader_editor.html">https://docs.blender.org/manual/en/latest/editors/shader_editor.html&lt;/a>&lt;/p>
&lt;p>[18] H. Muhammad and R. Ierusalimschy, “C APIs in extension and extensible languages,” &lt;em>J. Univers. Comput. Sci.&lt;/em>, vol. 13, no. 6, pp. 839–853, 2007.&lt;/p>
&lt;p>[19] H. H. Muhammad, “A study on scripting language APIs,” 2006.&lt;/p>
&lt;p>[20] R. Ierusalimschy, L. H. De Figueiredo, and W. C. Filho, “SPE paper Lua – an extensible extension language,” vol. 6, no. 1996, pp. 635–652, 2015.&lt;/p>
&lt;p>[21] R. Ierusalimschy, L. De Figueiredo, and W. Celes, “The evolution of an extension language: A history of Lua,” &lt;em>Proc. V Brazilian Symp. Program. Lang.&lt;/em>, vol. 1, no. 1, pp. 1–16, 2001, [Online]. Available: &lt;a href="http://www.lua.org/history.html%0Ahttp://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.15.9210&amp;amp;rep=rep1&amp;amp;type=pdf">http://www.lua.org/history.html%0Ahttp://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.15.9210&amp;amp;rep=rep1&amp;amp;type=pdf&lt;/a>&lt;/p>
&lt;p>[22] M. Idrees, F. Aslam, K. Shahzad, and S. M. Sarwar, “Towards a Universal Framework for Visual Programming Languages,” &lt;em>Pak. J. Engg. Appl. Sci.&lt;/em>, vol. 23, no. July, pp. 55–65, 2018, [Online]. Available: &lt;a href="https://www.researchgate.net/publication/328191862_Towards_a_Universal_Framework_for_Visual_Programming_Languages">https://www.researchgate.net/publication/328191862_Towards_a_Universal_Framework_for_Visual_Programming_Languages&lt;/a>&lt;/p>
&lt;p>[23] J. Gregory, &lt;em>Game Engine Architecture, Second Edition&lt;/em>, 2nd ed. USA: A. K. Peters, Ltd., 2014.&lt;/p>
&lt;p>[24] R. Ierusalimschy, L. H. de Figueiredo, and W. Celes, “Passing a Language through the Eye of a Needle,” &lt;em>Queue&lt;/em>, vol. 9, no. 5, pp. 20–29, 2011, doi: 10.1145/1978862.1983083.&lt;/p>
&lt;p>[25] J. K. Ousterhout, “Scripting: Higher-level programming for the 21st century,” &lt;em>Computer (Long. Beach. Calif).&lt;/em>, vol. 31, no. 3, pp. 23–30, 1998, doi: 10.1109/2.660187.&lt;/p>
&lt;p>[26] R. Nystrom, &lt;em>Crafting Interpreters&lt;/em>, 1st ed. ‎ Genever Benning. [Online]. Available: &lt;a href="https://www.craftinginterpreters.com/">https://www.craftinginterpreters.com/&lt;/a>&lt;/p>
&lt;p>[27] R. Nystrom, “Game Programming Patterns,” in &lt;em>Game Programming Patterns&lt;/em>, Genever Benning, 2014. [Online]. Available: &lt;a href="https://books.google.nl/books?id=AnvVrQEACAAJ">https://books.google.nl/books?id=AnvVrQEACAAJ&lt;/a>&lt;/p>
&lt;p>[28] R. Nystrom, “A Virtual Machine,” 2021. &lt;a href="https://craftinginterpreters.com/a-virtual-machine.html">https://craftinginterpreters.com/a-virtual-machine.html&lt;/a>&lt;/p>
&lt;p>[29] J. G. Guerrero, “Reinventing the wheel,” 2014.&lt;/p>
&lt;p>[30] C. O’Toole-Bateman, “The History of the Game Engine: Part 5 – Reinventing the Wheel.” &lt;a href="https://ultimategamingparadise.com/features/series/history-of-the-game-engine/part-5-reinventing-the-wheel/">https://ultimategamingparadise.com/features/series/history-of-the-game-engine/part-5-reinventing-the-wheel/&lt;/a>&lt;/p></description></item><item><title>What is a scripting language?</title><link>/posts/what-is-a-scripting-language/</link><pubDate>Tue, 07 Jun 2022 00:00:00 +0100</pubDate><guid>/posts/what-is-a-scripting-language/</guid><description>&lt;p>Have you ever stumbled upon job offers where companies are looking for &amp;ldquo;coders&amp;rdquo; or &amp;ldquo;scripters&amp;rdquo;? Every time I see those, I ask myself: what is the difference exactly? How can &amp;ldquo;scripting&amp;rdquo; or &amp;ldquo;coding&amp;rdquo; be different from programming? Is there even a difference? I could keep listing questions, but I am sure you get my point. With this in mind, I got asked a few times why I am using the term &amp;ldquo;scripting language&amp;rdquo; and &amp;ldquo;programming language&amp;rdquo; interchangeably, since they represent different concepts. But wait, are they or are they not the same thing? In order to answer this question, we are going to explore what academia has to say about it and combine it with the perspective of a game programmer. Now, what is a scripting language according to academia?&lt;/p>
&lt;h2 id="what-is-a-scripting-language">What is a scripting language?&lt;/h2>
&lt;p>One of the pioneers of the term &lt;em>scripting language&lt;/em> is the inventor of Tlc John Ousterhout [1]. Ousterhout defines scripting languages (SL) as programming languages that are intended to work with modules defined in other low-level languages such as C. Moreover, Ousterhout states that they are not meant to be used to write a whole application from scratch. In fact, scripting languages are more often used for plug-and-play situations to enable systems to communicate with each other. The use case of plug and play separates scripting languages from system programming languages [1].&lt;/p>
&lt;p>&lt;strong>From a game programmer perspective&lt;/strong>&lt;/p>
&lt;p>Ousterhout&amp;rsquo;s explanation aligns with how the game industry looks at scripting languages, where an SL is defined as a programming language which primary purpose is to permit to control and customize the behavior of the underlaying application (game/game engine). Therefore an SL is a high-level programming language implemented in a lower level language, which exposes most of the application (game engine) features to the developer [9, pp. 954-955].&lt;/p>
&lt;p>Based on Ousterhout&amp;rsquo;s point of view, an SL is just a sub form of a programming language which is defined in a lower level programming language. Following this logic, we can argue that C, for example, is a scripting language, since it is just a syntactic sugar of Assembly. But that is a discussion for another time. If you are interested in this topic, you might want to check Dino Oliva et al. &lt;a href="https://www.microsoft.com/en-us/research/wp-content/uploads/1997/01/pal-ifl.pdf">C&amp;ndash;: A Portable Assembly Language&lt;/a> research paper [2] or &lt;a href="https://james-iry.blogspot.com/2010/09/moron-why-c-is-not-assembly.html">Moron Why C Is Not Assembly&lt;/a> by James Iry [3]. Anyways, let&amp;rsquo;s get back to the original question: if an SL is just a programming language, what makes it so different than C, for example? Ousterhout&amp;rsquo;s states that the main difference is that SLs are interpreted languages while languages like C or Rust are system programming languages.&lt;/p>
&lt;h2 id="what-is-a-system-programming-language">What is a system programming language?&lt;/h2>
&lt;p>System programming languages are designed to construct data structures and algorithms from scratch to represent an application. C or Rust are great examples for such languages, since they can be used to construct all possible sorts of data structures due to the fact that essentially, they are a composition of primitive building blocks. Therefore, system programming languages are usually very low level and can represent the most primitive computer elements: words of memory [1]. Moreover, Ousterhout characterizes them as being typed and principally compiled. At the same time, scripting languages are mainly &lt;em>dynamic typed&lt;/em> or &lt;em>untyped&lt;/em>, and interpreted. [1]&lt;/p>
&lt;h2 id="what-is-an-interpreted-language">What is an interpreted language?&lt;/h2>
&lt;p>Interpreted languages differ from compiled languages in that they are not compiled from one language into another language. Compiled languages are in general directly executed on the CPU [4, pp. 1–23]. On the other hand, Linda Torczon &amp;amp; Keith Cooper define an interpreter as a system that &amp;ldquo;takes as input an executable specification and processes as output the result of executing the specification&amp;rdquo; [4, p. 3]. Moreover, Linda Torczon &amp;amp; Keith Cooper state that some languages such as Java or Lua use a hybrid approach[4, pp. 1–23]. They compile their source input to a bytecode representation which then gets interpreted by an interpreter, commonly called &lt;em>virtual machine (VM).&lt;/em> This mixed-method (also called hybrid method) combines the best of both worlds and can be found in many modern scripting languages [4, pp. 1–23] ,[5, pp. 155–179].&lt;/p>
&lt;p>&lt;strong>From a game programmer perspective&lt;/strong>&lt;/p>
&lt;p>Hybrid languages are interesting for the game industry since the game industry is pushes computer hardware to its limits to reach maximum performance. This hunt after performance leads to extreme code optimization to keep up with the competition [5, pp. 155–179]. The need for high performance is one of the reasons why languages that are using a mixed-method (hybrid language), such as Lua, are more often used than others.&lt;/p>
&lt;h2 id="what-are-hybrid-languages">What are hybrid languages?&lt;/h2>
&lt;p>Hybrid languages are more performant than purely interpreted languages [5, pp. 155–179] [6, pp. 25–26]. A purely interpreted language consumes more memory and may require pointer traversal. Traversing pointers may lead to random memory access and cache misses. On the contrary, compiling the source code to bytecode - a compact representation of source code - leads to dense and linear instructions [5, pp. 155–179]. CPUs prefer those kinds of instructions since they can be loaded quicker into cache lines [5, pp. 155–179] [7, pp. 1–24]. The structure of bytecode leads to higher performance than the purely interpreted language since they are better accessible to the CPU.&lt;/p>
&lt;p>The hybrid method should not be confused with two of the commonly used compilation methods: just in time compilation (JIT) and ahead of time (AOT) compilation. System programming languages are using AOT compilation while most interpreted languages (such as scripting languages) are often using either JIT or AOT. When compiling with AOT, everything gets compiled before running any function and is therefore known to the program. This also means that if something changes, the entire file needs to be recompiled. JIT, on the other hand, means that functions are compiled on demand, i.e. when they are run first. This reduces the load times of an executable [8]. Lua, for example, supports both: standard Lua is AOT while LuaJit is as the name suggested, a JIT Compiler. Therefore AOT and JIT are different methods of compiling code rather than a classification of different methods of language interpretation.&lt;/p>
&lt;p>&lt;strong>From a game programmer perspective&lt;/strong>&lt;/p>
&lt;p>Out of multiple reasons, it is important to know the kind of compilation method a language supports. First, the game industry tries to get the maximum out of the hardware [5, pp. 155–179], which means that performance is very important, as previously mentioned. Looking at AOT and JIT compilation methods, JIT seems appealing since it might reduce the loading times [8]. The problem is that JIT compilation might not work on all platforms the game is shipping on. Some specific platforms such as game consoles might forbid this technique in their technical requirement checklist (TRC). Therefore, compiling everything in advance might be preferred for such platforms. On the other hand, AOT compilation can also enable transpiling, the possibilities to compile to native code or just to C or C++ code that in return can be compiled. The factors if a language is compiling AOT or JIT are important for choosing the right language to solve a problem.&lt;/p>
&lt;h2 id="what-does-it-mean-if-a-scripting-language-is-a-extension-language">What does it mean if a Scripting Language is a “extension language”?&lt;/h2>
&lt;p>Interpreted SL are widely used in other areas than game development, such as artificial intelligence and web development. Python [10] and JavaScript [11] are great examples for such languages. Python is often used for data processing, such as artificial intelligence [12], while JavaScript is commonly used in web development [11]. Besides, JavaScript is used more frequently in game development [13 , 12]. Both Python and JavaScript are part of the evolution of modern scripting languages from simple command-based languages such as Tcl, a pioneer of scripting languages [1], towards complex, nearly general-purpose scripting languages [14]. SL have been greatly evolving ever since their initial introduction, and their use cases vary from the web to artificial intelligence.&lt;/p>
&lt;p>Scripting languages can be separated into subcategories such as extension languages or extensible languages. An extensible language is defined as a language that can be extended through external modules in different languages [14]. In contrast, an extension language defines a scripting language that only works within an embedded environment, which is usually called the host program or host application. Often SL offer support for both types. There are more categories than extension and extensible languages such as shell languages [1, 15 ,16], which are not covered, due the focus on game industry relevance. Further research might be needed to establish whether the choice of other subcategories than extension languages has a significant impact within the game industry when it comes to usage as scripting language for game logic or other internal logic.&lt;/p>
&lt;p>Extension languages are used to extend the host application with extra functionality [14]. The ability to extend the host program requires customization points within the language itself. These customization points enable the host program to provide custom actions within the embedded language. For this reason, extension languages provide next to their own syntax an application program interface (API), which the host application can use to interact with the embedded language [14,15].&lt;/p>
&lt;p>An excellent example for such languages is Lua. The creators R. Ierusalimschy et al, describe Lua as an extensible extension language [15]. Lua allows the host application to communicate with it via its C API and vice versa. Lua can also be extended by the host application with extra functionality [17]. This is also true for other languages such as &lt;a href="https://wren.io/">wren&lt;/a>, &lt;a href="https://www.angelcode.com/angelscript/">angelscript&lt;/a> or &lt;a href="https://dascript.org/">daScript&lt;/a>. They all allow the host application to communicate to the VM layer and vice versa. Some of them even offer native code generation.&lt;/p>
&lt;p>&lt;strong>From a game programmer perspective&lt;/strong>&lt;/p>
&lt;p>The ability to extend the language based on the requirements of the game is important since every game has different requirements. Game engines might want to expose certain functionality to the scripting runtime to empower the scripting environment to communicate to the world created in a higher-level language [9, pp. 954-955]. Lua is a great example for that – on its own, Lua is rather “simple” but once extended, and with its all functionality being exposed from the engine/game to the scripting environment, the language can become extremely powerful and flexible.&lt;/p>
&lt;h2 id="scripting-languages-are-programming-languages">Scripting languages ARE programming languages&lt;/h2>
&lt;p>The conclusion, based on what academia shows about scripting languages, is that they ARE programming languages. They are just a subcategory of programming languages such as system programming languages. We are heavily exposed to scripting languages since they are used on a daily basis to orchestra different tasks and glue code from different worlds together.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;p>[1] J. K. Ousterhout, “Scripting: Higher-level programming for the 21st century,” &lt;em>Computer (Long. Beach. Calif).&lt;/em>, vol. 31, no. 3, pp. 23–30, 1998, doi: 10.1109/2.660187.&lt;/p>
&lt;p>[2] C-: A Portable Assembly Language Dino Oliva, T. Nordin,Simon Peyton Jones Proceedings of the 1997 Workshop on Implementing Functional Languages | January 1997 Published by Springer Verlag&lt;/p>
&lt;p>[3] &lt;a href="https://james-iry.blogspot.com/2010/09/moron-why-c-is-not-assembly.html">Moron Why C Is Not Assembly&lt;/a> by James Iry (Accessed 07.04.2022)&lt;/p>
&lt;p>[4] L. Torczon and K. Cooper, &lt;em>Engineering A Compiler&lt;/em>, 2nd ed. San Francisco, CA, USA: Morgan Kaufmann Publishers Inc., 2007.&lt;/p>
&lt;p>[5] R. Nystrom, “Game Programming Patterns,” in &lt;em>Game Programming Patterns&lt;/em>, Genever Benning, 2014.&lt;/p>
&lt;p>[6] G. Melchiorri, C. Castagna, R. Sorge, and M. Bonifazi, &lt;em>Game Scripting Mastery&lt;/em>, vol. 24, no. 10. 2010.&lt;/p>
&lt;p>[7] R. Fabian, &lt;em>Data-Oriented Design: Software Engineering for Limited Resources and Short Schedules&lt;/em>. 2018.&lt;/p>
&lt;p>[8] &lt;a href="https://staff.fnwi.uva.nl/h.vandermeer/docs/lua/luajit/luajit_intro.html">Introducing LuaJIT&lt;/a> (Accessed 07.04.2022)&lt;/p>
&lt;p>[9] J. Gregory, &lt;em>Game Engine Architecture, Second Edition&lt;/em>, 2nd ed. USA: A. K. Peters, Ltd., 2014.&lt;/p>
&lt;p>[10] P. S. Foundation, “Python.” &lt;a href="https://www.python.org/">https://www.python.org/&lt;/a> (Accessed 07.04.2022)&lt;/p>
&lt;p>[11] Mozilla, “JavaScript.” &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">https://developer.mozilla.org/en-US/docs/Web/JavaScript&lt;/a> (Accessed 07.04.2022)&lt;/p>
&lt;p>[12] P. S. Foundation, “Python Applications.” &lt;a href="https://www.python.org/about/apps/">https://www.python.org/about/apps/&lt;/a> (Accessed 07.04.2022)&lt;/p>
&lt;p>[13] A. Andrade, “Game engines: a survey,” &lt;em>EAI Endorsed Trans. Game-Based Learn.&lt;/em>, vol. 2, no. 6, p. 150615, 2015, doi: 10.4108/eai.5-11-2015.150615&lt;/p>
&lt;p>[14] H. Muhammad and R. Ierusalimschy, “C APIs in extension and extensible languages,” &lt;em>J Univers. Comput. Sci.&lt;/em>, vol. 13, no. 6, pp. 839–853, 2007.&lt;/p>
&lt;p>[15] R. Ierusalimschy, L. H. De Figueiredo, and W. C. Filho, “SPE paper Lua – an extensible extension language,” vol. 6, no. 1996, pp. 635–652, 2015.&lt;/p>
&lt;p>[16] R. Ierusalimschy, L. De Figueiredo, and W. Celes, “The evolution of an extension language: A history of Lua,” &lt;em>Proc. V Brazilian Symp. Program. Lang.&lt;/em>, vol. 1, no. 1, pp. 1–16, 2001, [Online]. Available: [http://www.lua.org/history.html%0Ahttp://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.15.9210&amp;amp;rep=rep1&amp;amp;type=pdf](&lt;a href="http://www.lua.org/history.html">http://www.lua.org/history.html&lt;/a> http:/citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.15.9210&amp;amp;rep=rep1&amp;amp;type=pdf). (Accessed 07.04.2022)&lt;/p>
&lt;p>[17] R. Ierusalimschy, L. H. de Figueiredo, and W. Celes, “Passing a Language through the Eye of a Needle,” &lt;em>Queue&lt;/em>, vol. 9, no. 5, pp. 20–29, 2011, doi: 10.1145/1978862.1983083.&lt;/p></description></item><item><title>GitHub Systematic Review: Know your data.</title><link>/posts/systematic_review_on_github_method_discussion/</link><pubDate>Tue, 05 Apr 2022 00:00:00 +0100</pubDate><guid>/posts/systematic_review_on_github_method_discussion/</guid><description>&lt;p>While I was working on my Masters in &lt;a href="https://www.buas.nl/en/programmes/master-game-technology">Game Technology&lt;/a> at &lt;a href="https://www.buas.nl/en">Breda University of Applied Sciences&lt;/a> (BUas), I came across an interesting problem: &lt;em>How am I executing a systematic review of GitHub repositories?&lt;/em>&lt;/p>
&lt;p>When searching on the Internet, it was challenging to find good sources. I came across the fantastic work from the &lt;em>Department of Information and Computing Sciences, Utrecht University&lt;/em>: &lt;a href="https://www.mdpi.com/2076-3417/9/1/150">A Systematic Review of Open Source Clinical Software on GitHub for Improving Software Reuse in Smart Healthcare&lt;/a> by &lt;a href="https://sciprofiles.com/profile/563999">&lt;strong>Zhengru Shen&lt;/strong>&lt;/a> and &lt;a href="https://sciprofiles.com/profile/383240">&lt;strong>Marco Spruit&lt;/strong>&lt;/a>. They created a paper that explains step-by-step how to do a systematic review of GitHub repositories! As I mentioned in my previous blog post: &amp;ldquo;None of the standard literature regarding methodology covers this case. Okay, okay… GitHub is relatively new and special!&amp;quot;.&lt;/p>
&lt;p>You can basically follow along and do as they described. See my &lt;a href="https://simonrenger.de/posts/systematic_review_on_github/">previous blog post&lt;/a> for a TL;DR version. I describe how to execute the method of collecting data a little bit more practical with a python script-based example. The example code you can find, of course, on GitHub itself: &lt;a href="https://github.com/simonrenger/collect-data-from-github">&lt;strong>collect-data-from-github&lt;/strong>&lt;/a>&lt;/p>
&lt;p>This is all great but I wanted to discuss the data collection and processing part a bit more. As I found out, it is very different for each topic what kind of data you need to collect from the &lt;a href="https://docs.github.com/en/rest">GitHub REST API&lt;/a>. Also, it is important to discuss the reasoning behind the data and its processing&lt;/p>
&lt;h2 id="tldr">TL;DR&lt;/h2>
&lt;p>When gathering data from GitHub, we need to know in advance what we need for our study. There are 2 data sets we can collect: Textual data and numerical data. The textual data can be separated into Source Code and metadata. The metadata contains tags, topics, descriptions, README, and documentation links. The Numeric values are either date, such as the last date the project was updated, or values, such as the size of the project, the number of people staring the project issues, etc. The textual and numeric data must always be analyzed within the proper context. There are several existing tools that can help one to conduct the analyses.&lt;/p>
&lt;p>A few important takeaways about some specific data categories:&lt;/p>
&lt;ul>
&lt;li>A.I. is important to make sense out of Textual context such as README files or documentation in case manual labor shall be avoided. Such as &lt;a href="https://www.ibm.com/cloud/watson-studio">IBM Watson Natural Language Understanding&lt;/a> &lt;a href="https://www.nltk.org/">Natural Language Toolkit (NLTK)&lt;/a> for python [9] or Google&amp;rsquo;s &lt;a href="https://cloud.google.com/natural-language">Natural Language A.I.&lt;/a> [10].&lt;/li>
&lt;li>Source Code analyzes can be done by tools such as static analyzes tools, documentation tools or code base visualizers. Such as &lt;a href="https://github.com/CoatiSoftware/Sourcetrail">Sourcetrail&lt;/a> , &lt;a href="https://sourcegraph.com/">Source Graph&lt;/a>.&lt;/li>
&lt;li>Stars are a indication of interest in a project which needs to be set into a proper context, which can be done with tools such as &lt;a href="https://github.com/RepoReapers/reaper">RepoReaper&lt;/a> and &lt;a href="https://ghtorrent.org/">GHTorrent&lt;/a>. The second meaning of stars is just to bookmark something which does not guarantee that I am actually interested in this project. Also, the risk of distortion from fake stars or promotion actions can have an influence on star growth.&lt;/li>
&lt;li>Commits are a not reliable source to use to calculate if a project is successful or popular when matched with stars. Due to the reason that every project has their own commit policy [14].&lt;/li>
&lt;li>Forks are somewhat more reliable since there is a strong indication that they are connected with the number of stars. However, one should keep in mind that there is also the ability to have bots that do nothing else than fork projects. [14]&lt;/li>
&lt;/ul>
&lt;h2 id="what-kind-of-data-can-you-collect-on-github">What kind of data can you collect on GitHub?&lt;/h2>
&lt;p>GitHub provides a REST API [2], which is an service that allows the user to send request to it in a defined way (protocol) via the HTTP protocol and receive answers [3]. The service provides a lot of entry points, for a systematic review of GitHub Projects the &lt;a href="https://docs.github.com/en/rest/reference/search">search&lt;/a> endpoint, the REST API part that is concert with searching for repositions, is very important. Besides this, there are a few other endpoints that will be very useful which are listen in &lt;strong>Table 1&lt;/strong>.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Endpoint&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://docs.github.com/en/rest/reference/repos">Repositories&lt;/a>&lt;/td>
&lt;td>&amp;ldquo;The Repos API allows access information about GitHub repositories.&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://docs.github.com/en/rest/reference/projects">Projects&lt;/a>&lt;/td>
&lt;td>&amp;ldquo;The Projects API let you fetch projects in a repository.&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://docs.github.com/en/rest/reference/orgs">Organizations&lt;/a>&lt;/td>
&lt;td>&amp;ldquo;The Organizations API let you fetch information about a GitHub organizations.&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;em>&lt;strong>Table 1:&lt;/strong> Useful other API endpoints than the &lt;a href="https://docs.github.com/en/rest/reference/search">Search&lt;/a>&lt;/em>.&lt;/p>
&lt;p>From the GitHub REST API you can gather two kind of main data types: &lt;em>Numerical and Textual&lt;/em>. These can be used for further analyzes. There are two different textual information you can collect on GitHub: &lt;em>Source Code and Meta data&lt;/em> to describe the repository [1,2].&lt;/p>
&lt;p>The Source Code for example can be scanned manually or via a static analyzes tool or any other tool that can understand source code and gives us a meaning full understanding of it. Alberto S.Nuñez-Varela et al., has shown in their study &lt;em>Source code metrics: A systematic mapping study&lt;/em> [5] what kind of metrics can be applied when analyzing source code. The results of their work are very interesting since they report of almost 300 source code metrics. They also concluded that object oriented metrics have been mostly found and more research is needed to conduct to gather metrics for more feature oriented aspects.&lt;/p>
&lt;p>Furthermore, to analyze source code from a practical point of view. If one is looking for certain patterns, tools to visualize a codebase are useful. &lt;a href="https://github.com/CoatiSoftware/Sourcetrail">Sourcetrail&lt;/a> is such an open source tool that lets you navigate through the code base virtually. An other useful tool is &lt;a href="https://sourcegraph.com/">Source Graph&lt;/a> which allows you to search your code and 2M+ open source repositories [6].&lt;/p>
&lt;p>The other meta data such as README files, wiki or documentation stored in the project needs to be analyzed by hand or with the raise of AI one can make use of tools such as IBM Watson Natural Language Understanding [7] to help understand and process natural language. How you can use IBM&amp;rsquo;s Watson is greatly explained in the following article: &lt;a href="https://medium.com/analytics-vidhya/getting-started-with-notebooks-in-ibm-watson-nlu-part-1-3b0b92894901">Getting started with NLP using IBM Watson Studio&lt;/a> by &lt;a href="https://medium.com/@developeraritro?source=post_page-----3b0b92894901-----------------------------------">Aritro Mukherjee&lt;/a> [8]. There are, of course, other alternatives such as &lt;a href="https://www.nltk.org/">Natural Language Toolkit (NLTK)&lt;/a> for python [9] or Google&amp;rsquo;s &lt;a href="https://cloud.google.com/natural-language">Natural Language AI&lt;/a> [10]. These AI driven tools can help to identify themes, topics or search for the needed information within the meta data of a repository.&lt;/p>
&lt;p>In the space of numerical values we have also again two types: Dates and numerical values [1,4]. The dates can be used for our limitations since GitHub gives us only 3 dates [4]: &lt;code>pushed_at&lt;/code>, &lt;code>updated_at&lt;/code>,&lt;code>created_at&lt;/code>. The meaning behind them can be described as updated_at will be updated any time the repository object is updated. A repository object is updated when one, for example, update the description or the primary language of the repository. On the other hand, &lt;code>pushed_at&lt;/code> represents the date and time of the last commit. Since updated_at represents the timestamp of the last change to the repository which might be a be a commit, but it may also be other things, such as changing the description of the repo, creating wiki pages, etc. That is why one can say that commits are a subset of updates, and the &lt;code>pushed_at&lt;/code> timestamp will therefore, either be the same as the updated_at timestamp, or it will be an earlier timestamp [2,11].&lt;/p>
&lt;p>The other numeric values of interest can be gather from a GitHub Repository are described in &lt;strong>Table 2&lt;/strong>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Numeric Value&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Stargazers&lt;/td>
&lt;td>&amp;ldquo;Stargazers refers to the number of times a repository is bookmarked. It reflects an approximate level of interest in the repository&amp;rdquo; [1,2]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Forks&lt;/td>
&lt;td>&amp;ldquo;A fork is a copy of a repository. Forking is necessary for developers to contribute a project. Forks refers to the number of forks.&amp;rdquo; [1,2]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Contributors&lt;/td>
&lt;td>&amp;ldquo;The number of contributors who have worked for a repository.&amp;rdquo; [1,2]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Commits&lt;/td>
&lt;td>&amp;ldquo;The total number of commits.&amp;rdquo; [1,2]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Issues&lt;/td>
&lt;td>&amp;ldquo;Issues is the number of open issues in a repository&amp;rdquo; [1,2]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Size of source codes&lt;/td>
&lt;td>&amp;ldquo;The size is valued as the size of the whole repository (including all of its history), in KB.&amp;rdquo; [1,2]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Size of README file&lt;/td>
&lt;td>&amp;ldquo;The size of the README file of a repository, in B&amp;rdquo; [1,2]&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>Table 2:&lt;/strong> Overview of numerical values one can gather on GitHub*&lt;/p>
&lt;p>This data can be used and processed with methods such as GAM which are a extension of generalized linear models (GLMs), a GAM is an additive modeling technique that captures the impact of the predictive variables through smooth functions [1,2].&lt;/p>
&lt;h2 id="the-meaning-of-numeric-values-starsforks-and-commits">The meaning of numeric values: Stars,Forks and Commits&lt;/h2>
&lt;p>&lt;a href="https://sciprofiles.com/profile/563999">&lt;strong>Zhengru Shen&lt;/strong>&lt;/a> and &lt;a href="https://sciprofiles.com/profile/383240">&lt;strong>Marco Spruit&lt;/strong>&lt;/a> as well as of other researchers [13,14,15] are suggesting to use stargazers (stars) as indication of popularity. Research has shown that the &amp;ldquo;stargazers-based classifier [&amp;hellip;] to exhibit high precision (97%)&amp;rdquo; when trying to find retrieving engineered software projects [16]. Munaiah, N at all Research results in &lt;a href="https://github.com/RepoReapers/reaper">&amp;ldquo;RepoReaper&amp;rdquo;&lt;/a>. &lt;a href="https://github.com/RepoReapers/reaper">RepoReaper&lt;/a> &amp;ldquo;is a tool used to assess a GitHub repository in the form of a score. It considers a number of different &lt;em>attributes&lt;/em> in order to perform a thorough assessment.&amp;rdquo; [17] This tool is intend to be used with &amp;ldquo;together with a database of metadata provided by the &lt;a href="https://ghtorrent.org/">GHTorrent&lt;/a> project, reaper considers both contextual information such as commit history as well as the contents of the repository itself [17].&amp;rdquo; RepoReaper can be helpful in order to score the results of your systematic review of a subset of specific projects.&lt;/p>
&lt;h3 id="the-meaning-of-stars-from-a-developer-point-of-view">The Meaning of stars from a developer point of view&lt;/h3>
&lt;p>However it is important to discuss the meaning of stars, forks, and commits. As stated by GitHub, stars are a method to keep track of projects that you find interesting or discover via the explore/ &amp;ldquo;news&amp;rdquo; feed related projects [18]. They are also frequently used by the community as bookmarks [15]. As explained in several sources, such as from &lt;a href="https://sciprofiles.com/profile/563999">&lt;strong>Zhengru Shen&lt;/strong>&lt;/a> and &lt;a href="https://sciprofiles.com/profile/383240">&lt;strong>Marco Spruit&lt;/strong>&lt;/a> and a lot of other researchers [13,14,15] ,stars have two major functions. They function as an indication that someone likes the project or that they want to book mark the project [15]. A developer on OpenSource Stackexchange states this perfectly: &amp;ldquo;[…] Users on the GitHub website are able to &amp;ldquo;star&amp;rdquo; other people&amp;rsquo;s repositories, thereby saving them in their list of Starred Repos. Some people use &amp;ldquo;stars&amp;rdquo; to indicate that they like a project, other people use them as bookmarks so they can follow what&amp;rsquo;s going on with the repo later. […]&amp;rdquo; &lt;a href="https://opensource.stackexchange.com/users/520/left-se-on-10-6-19">15, Left SE On 10_6_19&lt;/a>].&lt;/p>
&lt;p>Hudson Borges et al, provide the academic data to the statements gathered on OpenSource Stackexchange [15] in their survey of 791 developers describe how they use stars on GitHub[14]. Their &lt;em>Table 2&lt;/em> [14] shows this.&lt;/p>
&lt;p>Note: Note that one answer can receive more than one theme therefore numbers might not add up to 791 for more details see &lt;a href="https://www.sciencedirect.com/science/article/pii/S0164121218301961">Paper&lt;/a>.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Reason&lt;/th>
&lt;th>Total&lt;/th>
&lt;th>%&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>To show appreciation&lt;/td>
&lt;td>415&lt;/td>
&lt;td>52.5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Bookmarking&lt;/td>
&lt;td>404&lt;/td>
&lt;td>51.1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Due to usage&lt;/td>
&lt;td>290&lt;/td>
&lt;td>36.7&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Due to recommendations&lt;/td>
&lt;td>36&lt;/td>
&lt;td>4.6&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unknown reasons&lt;/td>
&lt;td>5&lt;/td>
&lt;td>0.6&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;em>&lt;strong>Table 3&lt;/strong>. Why do users star GitHub repositories? (95% confidence level with a 3.15% confidence interval). based on Table 2 from &amp;ldquo;What’s in a GitHub Star? Understanding Repository Starring Practices in a Social Coding Platform&amp;rdquo; by Hudson Borges at al.&lt;/em>&lt;/p>
&lt;p>The reason why one needs to look at stars critical is that from technical perspective they are simple to fake. Since it is very simple to just create GitHub fake accounts and write a bot that just likes your project [15]. Besides the simplicity of faking stars a huge growth of stars might be the result of a promotion on social media (e.g. twitter) [13]. Hudson Borges at al suggests that &amp;ldquo;when ranking projects, we should check whether stars are result of active promotion&amp;rdquo; in their recommendations for researchers at the end of their journal article [15]. There are two main reasons why we should look critically on stars. Firstly one is that they might be created through fake accounts. Secondly they might be a result of active promotion on social media platforms.&lt;/p>
&lt;p>Moreover Hudson Borges et al, suggested in their final conclusion that stars are important for users to pick a project. The study found out that 3 out of 4 developers (of the 791 developers surveyed developers) check the stars metric before using or contributing to projects. Despite this strong indication between stars and popularity, the paper suggested that other factors such as code quality and documentation are important. Both factors can be evaluated with &lt;a href="https://github.com/RepoReapers/reaper">RepoReaper&lt;/a> in order to create a relationship between popularity and documentation / code quality [16,17]. For a lot of developers stars are a great indication to either contribute to a project but not just other factors such as code quality and documentation necessary.&lt;/p>
&lt;h3 id="forks-and-commits">Forks and commits&lt;/h3>
&lt;p>Research has shown that forks can be used to evaluate the popularity of a project since there is a strong correlation between stars and forks [15]. It is noteworthy to say that there are fork bots out there that just fork a project automatically since this can also be done automatic via the REST API [2]. That bots may create forks of projects might be important to consider when using the fork value as a indication for popularity. Forking a project via bots is not that frequently done as for stars that this can be ignored but still it is important to keep this in mind when building an argumentation about the correlation between stars and forks.&lt;/p>
&lt;p>Commits however only show a weak correlation with stars [15]. This can be explained with the practical reason that the way a project handles its commits can differ greatly, since every bigger project has their own policies in regards to how often one shall commit and how big they shall be. For example, The QT project has its own policies &lt;a href="https://wiki.qt.io/Commit_Policy">Commit Policy&lt;/a> or the KDE Projects &lt;a href="https://community.kde.org/Policies/Commit_Policy">Policies/Commit Policy&lt;/a>. Looking at this from a developer point of view, it explains than that the number of commits in relation to stars or in general towards the project popularity cannot be a hard link. The main indication of commits is to show how actively maintained a project is. Every commit will change the &lt;code>pushed_at&lt;/code> date. The fact that every project might have their own commit policy explains why the number of commits and the projects popularity has just a weak link.&lt;/p>
&lt;h2 id="takeaways">Takeaways&lt;/h2>
&lt;p>The main takeaways are that when one is analyzing GitHub repositories, one has to take the different limiting factors into account. These limiting factors are sometimes better described by users of GitHub than by pure academia. The best example is the discussion on Opensource Stack Exchange &lt;a href="https://opensource.stackexchange.com/questions/5110/github-stars-is-a-very-useful-metric-but-for-what">&amp;ldquo;GitHub Stars&amp;rdquo; is a very useful metric. But for &lt;em>what&lt;/em>?&lt;/a> from &lt;a href="https://opensource.stackexchange.com/users/520/left-se-on-10-6-19">Left SE On 10_6_19&lt;/a>. Moreover, it is important to realize what is the meaning behind the possible metrics. There has been some great work done by several authors [1,5,13,16]. Therefore it can be said that:&lt;/p>
&lt;ul>
&lt;li>A.I. is important to make sense out of Textual context such as README files or documentation in case manual labor shall be avoided. Such as &lt;a href="https://www.ibm.com/cloud/watson-studio">IBM Watson Natural Language Understanding&lt;/a> &lt;a href="https://www.nltk.org/">Natural Language Toolkit (NLTK)&lt;/a> for python [9] or Google&amp;rsquo;s &lt;a href="https://cloud.google.com/natural-language">Natural Language A.I.&lt;/a> [10].&lt;/li>
&lt;li>Source Code analyzes can be done by tools such as static analyzes tools, documentation tools or code base visualizers. Such as &lt;a href="https://github.com/CoatiSoftware/Sourcetrail">Sourcetrail&lt;/a> , &lt;a href="https://sourcegraph.com/">Source Graph&lt;/a>.&lt;/li>
&lt;li>Stars are a indication of interest in a project which needs to be set into a proper context, which can be done with tools such as &lt;a href="https://github.com/RepoReapers/reaper">RepoReaper&lt;/a> and &lt;a href="https://ghtorrent.org/">GHTorrent&lt;/a>. The second meaning of stars is just to bookmark something which does not guarantee that I am actually interested in this project. Also, the risk of distortion from fake stars or promotion actions can have an influence on star growth.&lt;/li>
&lt;li>Commits are a not reliable source to use to calculate if a project is successful or popular when matched with stars. Due to the reason that every project has their own commit policy [14].&lt;/li>
&lt;li>Forks are somewhat more reliable since there is a strong indication that they are connected with the number of stars. However, one should keep in mind that there is also the ability to have bots that do nothing else than fork projects. [14]&lt;/li>
&lt;/ul>
&lt;h2 id="references">References&lt;/h2>
&lt;p>[1] &lt;em>Department of Information and Computing Sciences, Utrecht University&lt;/em>: &lt;a href="https://www.mdpi.com/2076-3417/9/1/150">A Systematic Review of Open Source Clinical Software on GitHub for Improving Software Reuse in Smart Healthcare&lt;/a> by &lt;a href="https://sciprofiles.com/profile/563999">&lt;strong>Zhengru Shen&lt;/strong>&lt;/a> and &lt;a href="https://sciprofiles.com/profile/383240">&lt;strong>Marco Spruit&lt;/strong>&lt;/a>&lt;/p>
&lt;p>[2] &lt;a href="https://docs.github.com/en/rest">GitHub REST API&lt;/a> (accessed on 02 April 2022).&lt;/p>
&lt;p>[3] &lt;a href="https://www.redhat.com/en/topics/api/what-is-a-rest-api">What is a REST API?&lt;/a> (accessed on 02 April 2022).&lt;/p>
&lt;p>[4] &lt;a href="https://docs.github.com/en/rest/reference/repos">GitHub Repositories&lt;/a> (accessed on 02 April 2022).&lt;/p>
&lt;p>[5] Alberto S. Nuñez-Varela, Héctor G. Pérez-Gonzalez, Francisco E. Martínez-Perez, Carlos Soubervielle-Montalvo,
Source code metrics: A systematic mapping study, Journal of Systems and Software, Volume 128, 2017 &lt;a href="https://doi.org/10.1016/j.jss.2017.03.044">https://doi.org/10.1016/j.jss.2017.03.044&lt;/a>.&lt;/p>
&lt;p>[6] &lt;a href="https://sourcegraph.com/">Source Graph&lt;/a> (accessed on 02 April 2022).&lt;/p>
&lt;p>[7] BM Watson Natural Language Understanding. Available online: &lt;a href="https://www.ibm.com/cloud/watson-natural-language-understanding">https://www.ibm.com/cloud/watson-natural-language-understanding&lt;/a> (accessed on 02 April 2022).&lt;/p>
&lt;p>[8] &lt;a href="https://medium.com/analytics-vidhya/getting-started-with-notebooks-in-ibm-watson-nlu-part-1-3b0b92894901">Getting started with NLP using IBM Watson Studio&lt;/a> by &lt;a href="https://medium.com/@developeraritro?source=post_page-----3b0b92894901-----------------------------------">Aritro Mukherjee&lt;/a> (accessed on 02 April 2022)&lt;/p>
&lt;p>[9] &lt;a href="https://www.nltk.org/">Natural Language Toolkit (NLTK)&lt;/a> (access on 02 April 2022)&lt;/p>
&lt;p>[10] Google&amp;rsquo;s &lt;a href="https://cloud.google.com/natural-language">Natural Language AI&lt;/a> (access on 02 April 2022)&lt;/p>
&lt;p>[11] &lt;a href="https://github.community/t/difference-between-updated-at-and-pushed-at-in-repositories-list-response/13938">Difference between “updated_at” and “&lt;code>pushed_at&lt;/code>” in repositories list response&lt;/a> (access on 02 April 2022)&lt;/p>
&lt;p>[12] Wood, S.N. Generalized Additive Models: An Introduction with R; Chapman and Hall/CRC: London, UK, 2006.&lt;/p>
&lt;p>[13] Characterizing and predicting the popularity of github projects by &lt;a href="https://repositorio.ufmg.br/browse?type=author&amp;amp;value=Hudson+Silva+Borges"> Hudson Silva Borges&lt;/a> &lt;a href="https://repositorio.ufmg.br/handle/1843/BIRC-BBLN2S">https://repositorio.ufmg.br/handle/1843/BIRC-BBLN2S&lt;/a> (access on 02 April 2022)&lt;/p>
&lt;p>[14] Hudson Borges, Marco Tulio Valente, What’s in a GitHub Star? Understanding Repository Starring Practices in a Social Coding Platform, Journal of Systems and Software,Volume 146, 2018, Pages 112-129, ISSN 0164-1212, &lt;a href="https://doi.org/10.1016/j.jss.2018.09.016">https://doi.org/10.1016/j.jss.2018.09.016&lt;/a>.&lt;/p>
&lt;p>[15] &lt;a href="https://opensource.stackexchange.com/questions/5110/github-stars-is-a-very-useful-metric-but-for-what">&amp;ldquo;GitHub Stars&amp;rdquo; is a very useful metric. But for &lt;em>what&lt;/em>?&lt;/a> asked by &lt;a href="https://opensource.stackexchange.com/users/520/left-se-on-10-6-19">Left SE On 10_6_19&lt;/a> on &lt;a href="https://opensource.stackexchange.com/">opensource.stackexchange.com&lt;/a> (access on 02 April 2022)&lt;/p>
&lt;p>[16] Munaiah, N., Kroh, S., Cabrey, C. et al. Empir Software Eng (2017) 22: 3219. &lt;a href="https://doi.org/10.1007/s10664-017-9512-6">https://doi.org/10.1007/s10664-017-9512-6&lt;/a>&lt;/p>
&lt;p>[17] &lt;a href="https://github.com/RepoReapers/reaper">RepoReaper&lt;/a> (access on 02 April 2022)&lt;/p>
&lt;p>[18] &lt;a href="https://docs.github.com/en/get-started/exploring-projects-on-github/saving-repositories-with-stars">Saving repositories with stars&lt;/a> (access on 02 April 2022)&lt;/p></description></item><item><title>Systematic review of repositories on GitHub with python (Game Dev Style)</title><link>/posts/systematic_review_on_github/</link><pubDate>Tue, 28 Dec 2021 00:00:00 +0100</pubDate><guid>/posts/systematic_review_on_github/</guid><description>&lt;p>While I was working on my Masters in &lt;a href="https://www.buas.nl/en/programmes/master-game-technology">Game Technology&lt;/a> at &lt;a href="https://www.buas.nl/en">Breda University of Applied Sciences&lt;/a> (BUas), I came across an interesting problem: &lt;em>How am I executing a systematic review of GitHub repositories?&lt;/em>&lt;/p>
&lt;p>None of the standard literature regarding methodology covers this case. &lt;em>Okay okay&amp;hellip;&lt;/em> GitHub is relatively new and special!&lt;/p>
&lt;p>The lack of answers in literature led me into the wild of the Internet. Sadly when googling &lt;em>&amp;lsquo;Systematic Review of GitHub Repositories&amp;rsquo;&lt;/em>, you do not find a &amp;ldquo;HowTo&amp;rdquo; or actually a good GitHub repository with some software.&lt;/p>
&lt;p>That I find little on regular Google is interesting because Google Scholar gives you a lot of entries when looking for Reviews on GitHub. Sadly, many of these reviews are, as per usual, behind a paywall. Moreover, those papers usually just claim, &amp;ldquo;We did this &amp;hellip; description,&amp;rdquo; but there is seldom any code to be found, or if there is code, it is written in some obscure language an average Game Developer does not use&amp;hellip;&lt;/p>
&lt;p>Well, I just adjusted my search a bit. Finally, I came across this fantastic article from the &lt;em>Department of Information and Computing Sciences, Utrecht University&lt;/em>: &lt;a href="https://www.mdpi.com/2076-3417/9/1/150">A Systematic Review of Open Source Clinical Software on GitHub for Improving Software Reuse in Smart Healthcare&lt;/a> by &lt;a href="https://sciprofiles.com/profile/563999">&lt;strong>Zhengru Shen&lt;/strong>&lt;/a> and &lt;a href="https://sciprofiles.com/profile/383240">&lt;strong>Marco Spruit&lt;/strong>&lt;/a>. They did a fantastic job by creating a paper that explains step-by-step how to do a systematic review of GitHub repositories!&lt;/p>
&lt;p>Let me give you a TL;DR (for more details, you need to read my paper later or the original paper link above):&lt;/p>
&lt;p>&lt;strong>Data Extraction&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>We do a preliminary search of our topic with some keywords or topics of our liking by using &lt;a href="https://github.com/search">GitHub Search&lt;/a> and &lt;a href="https://github.com/topics">GitHub Topics&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We try this in multiple languages to find the correct language (I am talking about natural languages such as English). Maybe our specific topic is more common in Spanish than English, or we need to analyze both. This is important to know.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Might we already have a time frame based on our literature review? This is important to take into account when searching for anything on GitHub.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We also need to decide: &lt;em>Are the Programming Languages important or not&lt;/em>? In general, what is needed from this search for our data analysis? For this, I recommend opening the &lt;a href="https://docs.github.com/en/rest/reference/search">REST API&amp;rsquo;s&lt;/a> reference manual: &lt;a href="https://docs.github.com/en/rest/reference/search">GitHub search REST API&lt;/a>. This has a list of things you can extract.&lt;/p>
&lt;p>4.1 Do I need some extra information besides the repository? Or the byte size usage is essential? If yes, check the rest of the API&amp;rsquo;s documentation. &lt;a href="https://docs.github.com/en/rest/reference">Check out the API&amp;rsquo;s Reference&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We connect to the &lt;a href="https://docs.github.com/en/rest/reference/search">GitHub search REST API&lt;/a> with our python script using a token: &lt;a href="https://docs.github.com/en/rest/overview/other-authentication-methods#basic-authentication">&lt;em>How to use a token to authentify?&lt;/em>&lt;/a> We are using Python and &lt;a href="https://github.com/PyGithub/PyGithub">PyGitHub&lt;/a>, which does most of the work for us.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We can define multiple queries for the search, if needed for your topic. GitHub allows you to search besides regular queries such as &amp;ldquo;&lt;em>scripting languages&lt;/em>&amp;rdquo; also for topics: &amp;ldquo;&lt;em>topic:scripting-languages&lt;/em>&amp;quot;. Using topic queries besides regular queries may increase the results of your search. Moreover, you can exclude things. For example, if you wanted to exclude all Visual Studio Extensions from your search, all you need to do is: &amp;ldquo;&lt;em>scripting languages NOT Visual+Studio&lt;/em>&amp;rdquo; (The &lt;strong>+&lt;/strong> is important because otherwise, it will ignore only &amp;ldquo;&lt;em>Visual&lt;/em>&amp;rdquo; and not &amp;ldquo;&lt;em>Visual Studio&lt;/em>&amp;quot;).
For more info about the search syntax check: &lt;a href="https://docs.github.com/en/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax">Understanding the search syntax&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>After the last step, you need to store the findings in some form. For example, you can keep your results in a CSV file or in a database.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Data Processing&lt;/strong>&lt;/p>
&lt;p>This is where my TL;DR ends since this highly depends on your topic. For example, you can do a &lt;em>Descriptive Analysis&lt;/em>, an example of which can be found in the original paper. You can also use &lt;em>Generalized Additive Models&lt;/em> to process the data. Moreover, you might need an AI to analyze all the README files, descriptions, etc., to extract the extra data you need. &lt;a href="https://sciprofiles.com/profile/563999">&lt;strong>Zhengru Shen&lt;/strong>&lt;/a> and &lt;a href="https://sciprofiles.com/profile/383240">&lt;strong>Marco Spruit&lt;/strong>&lt;/a> are using Watson to do some of their topic modelings (see &lt;a href="https://www.mdpi.com/2076-3417/9/1/150">2.4. Topic Modeling&lt;/a>).&lt;/p>
&lt;p>Anyways, as a game dev (or a game dev to be), I love sample code and practical things! This is why I really like the paper I mentioned before since the authors also provided the GitHub repository with the source code of the used code for their study. From an academic point of view, this delights my heart since I could reproduce their paper. The developer in me is happy since I have a script example for my paper! The original source code you can find here: &lt;a href="https://github.com/ianshan0915">ianshan0915&lt;/a>/&lt;a href="https://github.com/ianshan0915/clinical-opensource-projects">&lt;strong>clinical-opensource-projects&lt;/strong>&lt;/a> (a collection of python scripts).&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Warning:&lt;/strong> This repository is not made to be reused to be used for your own project. You can (like I did), but you still need to read the source code and find things you do not need. As I said, I &lt;strong>love&lt;/strong>, absolutely &lt;strong>love&lt;/strong> sample code! This is what this code is for.&lt;/p>
&lt;/blockquote>
&lt;p>What does this repo contain? Before we open the GitHub repo and clone it, let&amp;rsquo;s have a look at how they describe it in their paper:&lt;/p>
&lt;p>&amp;ldquo;&lt;em>The data extraction pipeline was written in Python using a third-party library, &lt;a href="https://github.com/PyGithub/PyGithub">PyGitHub&lt;/a>.&lt;/em>
&lt;em>The pipeline took the chosen search terms as input and received repository data in JSON. The JSON responses were first filtered and then converted to database records and pushed to tables in a MySQL database. Repositories with no description or no programming language specified were excluded from further analysis for the reason that clinical software was the focus of our study. The whole process is reproducible by running the Python scripts at Reference [22]. Moreover, replacing the search term with others scales the pipeline to other domains.&lt;/em>&amp;rdquo; (22: Source Codes of Open Source Clinical Software. Available online: &lt;a href="https://github.com/ianshan0915/clinical-">https://github.com/ianshan0915/clinical-&lt;/a> opensource-projects (accessed on 25 November 2018)) &lt;a href="https://www.mdpi.com/2076-3417/9/1/150">A Systematic Review of Open Source Clinical Software on GitHub for Improving Software Reuse in Smart Healthcare&lt;/a>&lt;/p>
&lt;p>After reading the description of their data extraction pipeline, we open the repo. However, there are no instructions on how to use/install the scripts in the README. But no worries, I have a quick summary of what you need:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/PyGithub/PyGithub">PyGitHub&lt;/a> communication with the GitHub REST API&lt;/li>
&lt;li>&lt;a href="https://pandas.pydata.org/">pandas&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/watson-developer-cloud/python-sdk">Watson Developer Cloud Python SDK&lt;/a> for analysing the readme files and descriptions&lt;/li>
&lt;li>&lt;a href="https://www.textrazor.com/docs/python">textrazor&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The conclusion for me is it is excellent that I have the code, but I would spend too much time bending it to my will. I can better follow their lead and write my own script, which is something I think all game devs know somehow.&lt;/p>
&lt;p>&lt;strong>My take on it&lt;/strong>&lt;/p>
&lt;p>Now, this is what I did, and I ended up with a small Python script that can be used for my purposes. If you need just data collection from GitHub, you can also use it: &lt;a href="https://github.com/simonrenger/collect-data-from-github">GitHub search query python&lt;/a>&lt;/p>
&lt;p>The script allows you to write a simple configuration JSON file:&lt;/p>
&lt;pre>&lt;code class="language-json">{
&amp;quot;token&amp;quot;: &amp;quot;my token&amp;quot;,
&amp;quot;readme_dir&amp;quot;: &amp;quot;./&amp;quot;,
&amp;quot;output&amp;quot;: &amp;quot;./&amp;quot;,
&amp;quot;format&amp;quot;: &amp;quot;CSV&amp;quot;,
&amp;quot;criteria&amp;quot;: {
&amp;quot;time&amp;quot;: {
&amp;quot;min&amp;quot;: 2010,
&amp;quot;max&amp;quot;: 2022
}
},
&amp;quot;terms&amp;quot;: [
&amp;quot;MY SEARCH QUERY&amp;quot;,
&amp;quot;MY SEARCH QUERY&amp;quot;,
],
&amp;quot;attrs&amp;quot;: [
&amp;quot;id&amp;quot;,
&amp;quot;full_name&amp;quot;,
]
}
&lt;/code>&lt;/pre>
&lt;p>To communicate with the GitHub API, you need a token you can obtain via your GitHub account. This field is optional, and you can also pass it as an argument to the script if you prefer this! As of writing, you have an hourly request rate of 5000 requests. Besides, the script obeys some cooldown time in between requests to not be locked out by the DDOS security of the API.
The output field lets you define where your collected data shall be stored. The file name will be &lt;code>repositories_DATE.[csv,json]&lt;/code> since I decided to spill out a CSV or JSON file, you can parse it later if you need to. If you need to download &lt;code>README&lt;/code> files, you also provide a &lt;code>readme_dir&lt;/code> field. They will be stored in there by &lt;code>repo + date&lt;/code>. If it is not present, the script assumes you do not need them. The criteria take the time frame from when to when do you need this, which will be used to collect repositories within the defined time frame.
The heart of your config is a list of the terms you are searching for:&lt;/p>
&lt;pre>&lt;code class="language-json"> &amp;quot;terms&amp;quot;: [
&amp;quot;topic:visual-scripting-language NOT Visual+Studio&amp;quot;,
&amp;quot;topic:visual-programming-language NOT Visual+Studio&amp;quot;,
&amp;quot;topic:visual-programming NOT Visual+Studio&amp;quot;,
&amp;quot;topic:visual-scripting NOT Visual+Studio&amp;quot;,
&amp;quot;topic:visual-programming-editor NOT Visual+Studio&amp;quot;,
&amp;quot;topic:dataflow-programming NOT Visual+Studio&amp;quot;
],
&lt;/code>&lt;/pre>
&lt;p>This will execute the criteria for those search terms every time!&lt;/p>
&lt;p>Last but not least, we have &lt;code>attrs&lt;/code> that allow you to define the fields you care about from the REST API repository. There is more info on what to write in there: &lt;a href="https://docs.github.com/en/rest/reference/search">GitHub search REST API&lt;/a>&lt;/p>
&lt;p>Now you might wonder how to actually run this script:&lt;/p>
&lt;pre>&lt;code class="language-bash">python github-search-query.py --help
&lt;/code>&lt;/pre>
&lt;p>The previous command will give you some ideas on how to run it. But there is a faster way:&lt;/p>
&lt;pre>&lt;code class="language-bash">python github-search-query.py config.json
&lt;/code>&lt;/pre>
&lt;p>And if you want to pass a token along:&lt;/p>
&lt;pre>&lt;code class="language-bash">python github-search-query.py --token my_token config.json
&lt;/code>&lt;/pre>
&lt;p>Well that&amp;rsquo;s pretty much it! Have fun data collecting!&lt;/p></description></item></channel></rss>